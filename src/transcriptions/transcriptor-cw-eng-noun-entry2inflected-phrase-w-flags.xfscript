! "Inflections" of English translations for Cree nouns in CW
! using flag-diacritics for long-term dependencies

! USAGE:
! 1: Number/Obviation/Locative/Distributive (obligatory): Sg+ | Pl+ | Obv+ | Loc+ | Distr+
! 2: (Diminutive) (optional): Dim+
! 3: (Possession) (optional):  Px1Sg+ | Px2Sg+ | Px3Sg+ | Px1Pl+ | Px12Pl+ | Px2Pl+ | Px3Pl+ | Px4Sg/Pl+ | PxX+
! 4: English phrase to be inflected, preceded by a space separating from the initial tags

! EXAMPLES:
! Pl+ small boat, ship --> small boats, ships
! Sg+Dim+ small boat; ship --> a little small boat; a little ship
! Distr+ boat, ship --> among ships, among boats
! Obv+Px1Sg+ a boat, a ship --> my boat over there, my ship over there
! Sg+Dim+Px1Sg+ a boat, a ship --> my little boat, my little ship
! N.B. Inflected phrase is preceded by a single space
! N.B. Parenthetical expressions, in parentheses/brackets should be removed before phrase inflection

! Character/tag class definitions

define Tags [ "Sg+" | "Pl+" | "Obv+" | "Loc+" | "Distr+" ] ;

define Possession [ "Px1Sg+" | "Px2Sg+" | "Px3Sg+" | "Px1Pl+" | "Px12Pl+" | "Px2Pl+" | "Px3Pl+" | "Px4Sg/Pl+" | "PxX+" ] ;

define Consonant [ b | c | d | f | g | h | j | k | l | m | n | p | q | r | s | t | v | w | x | z ]  ;

define Vowel [ a | e | i | o | u ] ;

define Capital [ A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z ] ;

define Alphabet [ Vowel | Consonant | "y" | Capital ] ;

define Punctuation [ "." | "," | ":" | ";" | "!" | "?" | "-" | "/" | "|" | "\" | %' | %" | "(" | ")" | "[" | "]" | "{" | "}" ] ;

define Symbols [ "@" | "#" | "$" | "€" | "£" | "§" | "%" | "&" | "+" | "*" | "<" | ">" | "+" | "=" | "~" | "^" ] ;

define Number [ 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 ] ;
! "Inflections" of English definitions for Cree verbs

define Consonant [ b | c | d | f | g | h | j | k | l | m | n | p | q | r | s | t | v | w | x | z ]  ;

define Vowel [ a | e | i | o | u ] ;

define Capital [ A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z ] ;

define Alphabet [ Vowel | Consonant | "y" | Capital ] ;

define Punctuation [ "." | "," | ":" | ";" | "!" | "?" | "-" | "/" | "|" | "\" | %' | %" | "(" | ")" | "[" | "]" | "{" | "}" ] ;

define Symbols [ "@" | "#" | "$" | "€" | "£" | "§" | "%" | "&" | "+" | "*" | "<" | ">" | "+" | "=" | "~" | "^" ] ;

define Number [ 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 ] ;

define Letters [ Alphabet | Punctuation | Symbols | Number | " " ] ;

define Bx [ " " | .#. | Punctuation ] ;

define Px [ "," | ";" | .#. ] ;

define TenseAspect [ "Prs+" | "Prt+" | "Fut+" | "Int+" | "Cond+" | "Inf+" | "Imm+" | "Del+" ] ;

define Progressive [ "Prog+" ] ;

define Repetitive [ "Rept+" ] ;

define Subject [ "1Sg+" | "2Sg+" | "3Sg+" | "1Pl+" | "21Pl+" | "2Pl+" | "3Pl+" | "4Sg/Pl+" | "5Sg/Pl+" | "X+" ] ;

define Object [ "1SgO+" | "2SgO+" | "3SgO+" | "1PlO+" | "21PlO+" | "2PlO+" | "3PlO+" | "4Sg/PlO+" | "5Sg/PlO+" | "XO+" ] ;

! Standardization
regex [ {He} | {he} | {She} | {she} | {he/she} | {They} | {they} -> {s/he} , {It} -> {it} , {him} | {her} | {him/her} -> {s.o.} || " " _ [ " " | "," | ";" | "!" | "?" | "." | .#. ] ] ;
define Standardization

! regex [ {s} -> [ [ "@R.tense.Prs@" | "@R.tense.Cond@" ] "@D.subject.3Sg@" ] | "@R.tense.Fut@" | "@R.tense.Int@" | "@R.tense.Imm@" | "@R.tense.Del@" | "@R.tense.! Inf@" || {s/he } \" "+ \i _ \Alphabet ] ;
! | [ {s} -> {ed} "@R.tense.Prt@" || {s/he } \" "+ \i _ \Alphabet ]
! | [ [..] -> [ "@R.tense.Prs@" | "@R.tense.Cond@" ] "@R.subject.3Sg@" ] ;
! define VerbInflection

read lexc src/transcriptions/cw-eng-verbs-prs3Sg2prt-w-flags.lexc
define EngPrt

read lexc src/transcriptions/cw-eng-verbs-prs3Sg2inf-w-flags.lexc
define EngInf

read lexc src/transcriptions/cw-eng-verbs-prs3Sg2prog-w-flags.lexc
define EngProg

read lexc src/transcriptions/cw-eng-verbs-prs3Sg2prs3Sg-w-flags.lexc
define EngPrs

!! Word-specific explicit solution for verb morphology - Option 1 (works only in FOMA)
regex [
!! Word-specific solution
EngProg -> || [ {s/he} | {he} | {she} | {it} | {there} ] { } _ [ Bx - "." ] ]
! | [ EngPrs -> || [ {s/he} | {he} | {she} | {it} | {there} ] { } _ [ Bx - "." ] ]
| [ {s} -> {s} "@D.prog.Prog@" || [ {s/he} | {he} | {she} | {it} | {there} ] { } Alphabet+ _ [ Bx - "." ] ]
.o. [
{s} -> {s} [ "@R.tense.Prs@" | "@R.tense.Cond@" ]  "@R.subject.3Sg@" || [ {s/he} | {he} | {she} | {it} ] { } Alphabet+ \i _ \Alphabet
,, EngInf -> || [ {s/he} | {he} | {she} | {it} | {there} ] { } _ \Alphabet
,, EngPrt  -> || [ {s/he} | {he} | {she} | {it} | {there} ] { } _ \Alphabet
] ;
define VerbInflection

!! Word-specific explicit solution for verb morphology - Option 2 (works)
! regex [
! {sees} -> {sees}
!    [ "@R.tense.Prs@" | "@R.tense.Cond@" ] "@R.subject.3Sg@" || [ {s/he} | {he} | {she} | {it} ] { } _ ! [ Bx - "." ]
! ,, {sees} -> {see}
!    [ [ [ "@R.tense.Prs@" | "@R.tense.Cond@" ] "@D.subject.3Sg@" ] | "@R.tense.Fut@" | "@R.tense.Int@" | "@R.tense.Imm@" | "@R.tense.Del@" | "@R.tense.Inf@" ] || [ {s/he} | {he} | {she} | {it} ] { } _ [ Bx - "." ]
! ,, {sees} -> {saw}
!    "@R.tense.Prt@" || [ {s/he} | {he} | {she} | {it} ] { } _ [ Bx - "." ]
! ] ;
! define VerbInflection

!! Rule-based solution for verb morphology
! regex [
! {s} -> {>ing} "@R.prog.Prog@" | {s} "@D.prog.Prog@"
! || [ {s/he} | {he} | {she} | {it} | {there} ] { } Alphabet+ \i _ [ Bx - "." ] ]
! !! 'be' as special case with progressive
! .o. [ {is} -> {being} "@R.prog.Prog@" | {is} "@D.prog.Prog@"
! || [ {s/he} | {he} | {she} | {it} | {there} ] { } _ [ Bx - "." ] ]
! .o. [
! {es} -> {es} [ [ [ "@R.tense.Prs@" | "@R.tense.Cond@" ] "@R.subject.3Sg@" ] | "@R.tense.Fut@" | "@R.tense.Int@" | "@R.tense.Imm@" | "@R.tense.Del@" | "@R.tense.Inf@" ] || [ {s/he} | {he} | {she} | {it} ] " " \{ }* Consonant  _ (\Alphabet) [ Bx - "." ]
! ,, {es} -> 0 [ [ "@R.tense.Prs@" | "@R.tense.Cond@" ] "@D.subject.3Sg@" ] || [ {s/he} | {he} | {she} | {it} ] " " \{ }* Consonant  _ (\Alphabet) [ Bx - "." ]
! ,, {es} -> {>ed} "@R.tense.Prt@" || [ {s/he} | {he} | {she} | {it} ] " " \{ }* Consonant _ (\Alphabet) [ Bx - "." ]
! ] .o. [ s -> s [ [ "@R.tense.Prs@" | "@R.tense.Cond@" ] "@R.subject.3Sg@" ] | "@R.tense.Fut@" | "@R.tense.Int@" | "@R.tense.Imm@" | "@R.tense.Del@" | "@R.tense.Inf@" || [ {s/he} | {he} | {she} | {it} ] " " \{ }* \[ {ha} | i ]  _ (\Alphabet) [ Bx - "." ]
! ,, s -> 0 [ [ "@R.tense.Prs@" | "@R.tense.Cond@" ] "@D.subject.3Sg@" ] || [ {s/he} | {he} | {she} | {it} ] " " \{ }* \[ {ha} | i ]  _ (\Alphabet) [ Bx - "." ]
! ,, s -> {>ed} "@R.tense.Prt@" || [ {s/he} | {he} | {she} | {it} ] " " \{ }* \[ {ha} | i ] _ (\Alphabet) [ Bx - "." ]
! ] ;
! define VerbInflection

!! Irregular verb forms
! regex {com>ed} -> {came} || \Alphabet _ \Alphabet
! ,, {doe>ed} -> {did} || \Alphabet _ \Alphabet
! ,, {goe>ed} -> {went} || \Alphabet _ \Alphabet
! ,, {ha>ed} -> {had} || \Alphabet _ \Alphabet
! ,, {see>ed} -> {saw} || \Alphabet _ \Alphabet
! ,, {doe} -> {do} || \Alphabet _ \Alphabet
! ,, {goe} -> {go} || \Alphabet _ \Alphabet
! ,, {ha} -> {have} || \Alphabet _ \Alphabet
! ,, {dos} -> {does} || \Alphabet _ \Alphabet
! ,, {gos} -> {goes} || \Alphabet _ \Alphabet
! ,, {haes} -> {has} || \Alphabet _ \Alphabet
! ;
! define IrregularVerbs ! (not needed now)

! Tense/aspect conversion
regex [ [..] -> "@R.prog.Prog@" {is } | "@D.prog.Prog@" || {s/he } | {it } | {there } \Alphabet* _ ]
.o. [ [..] -> "@R.tense.Fut@" {is going to }
, [..] -> "@R.tense.Int@" "@R.subject.3Sg@" {wants to }
, [..] -> "@R.tense.Int@" "@D.subject.3Sg@" {want to }
, [..] -> "@R.tense.Prs@" | "@R.tense.Prt@" || {s/he } | {it } | {there } _ ]
| [ [..] -> "@R.tense.Cond@" {when }
, [..] -> [ "@R.tense.Imm@" | "@R.tense.Del@" ] {let }
, [..] -> "@R.tense.Inf@" {for }  || _ {s/he } | {it } | {there } ]
.o. [ [..] -> "@R.tense.Inf@" {to } | "@D.tense.Inf@" || {s/he } | {it } | {there } _ ]
.o. [ [..] -> { now} "@R.tense.Imm@" | { later} "@R.tense.Del@" | "@D.tense.Imm@" "@D.tense.Del@" || _ Px ] 
.o. [ [..] -> { again and again} "@R.rept.Rept@" | "@D.rept.Rept@" || _ Px ]
;
define TenseAspectConversion

! Be-copula inflection
regex [ {is} -> {be} || {is going to } (\Alphabet) _ \Alphabet ]
.o. [ {is} -> {be} [ "@R.tense.Int@" | "@R.tense.Imm@" | "@R.tense.Del@" | "@R.tense.Inf@" ]
, {is} -> {am} "@R.subject.1Sg@" [ "@R.tense.Prs@" | "@R.tense.Cond@" | "@R.tense.Fut@" ]
, {is} -> {are} [ "@R.subject.2Sg@" | "@R.subject.1Pl@" | "@R.subject.21Pl@" | "@R.subject.2Pl@" | "@R.subject.3Pl@" | "@R.subject.4Sg/Pl@" | "@R.subject.5Sg/Pl@" ] [ "@R.tense.Prs@" | "@R.tense.Fut@" | "@R.tense.Cond@" ]
, {is} -> {is} [ "@R.subject.3Sg@" | "@R.subject.X@" ] [ "@R.tense.Prs@" | "@R.tense.Fut@" | "@R.tense.Cond@" ]
, {is} -> {was} [ "@R.subject.1Sg@" | "@R.subject.3Sg@" | "@R.subject.X@" ] "@R.tense.Prt@"
, {is} -> {were} [ "@R.subject.2Sg@" | "@R.subject.1Pl@" | "@R.subject.21Pl@" | "@R.subject.2Pl@" | "@R.subject.3Pl@" | "@R.subject.4Sg/Pl@" | "@R.subject.5Sg/Pl@" ] "@R.tense.Prt@"
|| \Alphabet _ \Alphabet ] ;
define BeInflection

! Subject Inverse Conversion
regex [ {s/he} -> {me} "@R.subject.1Sg@" [ "@R.tense.Imm@" | "@R.tense.Del@" | "@R.tense.Inf@" ]  
, {s/he} -> {you} "@R.subject.2Sg@" [ "@R.tense.Imm@" | "@R.tense.Del@" | "@R.tense.Inf@" ]  
, {s/he} -> {him/her} "@R.subject.3Sg@" [ "@R.tense.Imm@" | "@R.tense.Del@" | "@R.tense.Inf@" ]  
, {it} -> {it} "@R.subject.3Sg@" [ "@R.tense.Imm@" | "@R.tense.Del@" | "@R.tense.Inf@" ]  
, {s/he} -> {us} "@R.subject.1Pl@" [ "@R.tense.Imm@" | "@R.tense.Del@" | "@R.tense.Inf@" ]  
, {s/he} -> {you and us} "@R.subject.21Pl@" [ "@R.tense.Imm@" | "@R.tense.Del@" | "@R.tense.Inf@" ]  
, {s/he} -> {you all} "@R.subject.2Pl@" [ "@R.tense.Imm@" | "@R.tense.Del@" | "@R.tense.Inf@" ]  
, {s/he} | {it} -> {them} "@R.subject.3Pl@" [ "@R.tense.Imm@" | "@R.tense.Del@" | "@R.tense.Inf@" ]  
, {s/he} -> {him/her/them} "@R.subject.4Sg/Pl@" [ "@R.tense.Imm@" | "@R.tense.Del@" | "@R.tense.Inf@" ]  
, {s/he} -> {him/her/them over there} "@R.subject.5Sg/Pl@" [ "@R.tense.Imm@" | "@R.tense.Del@" | "@R.tense.Inf@" ]  
, {s/he} -> {someone} "@R.subject.X@"  [ "@R.tense.Imm@" | "@R.tense.Del@" | "@R.tense.Inf@" ]
|| Bx _ Bx ]

! Subject Conversion
| [ {s/he} -> {I} "@R.subject.1Sg@" "@D.tense.Imm@" "@D.tense.Del@" "@D.tense.Inf@" 
, {s/he}  -> {you} "@R.subject.2Sg@" "@D.tense.Imm@" "@D.tense.Del@" "@D.tense.Inf@" 
, {s/he} -> {he/she} "@R.subject.3Sg@" "@D.tense.Imm@" "@D.tense.Del@" "@D.tense.Inf@" 
, {it} -> {it} "@R.subject.3Sg@" "@D.tense.Imm@" "@D.tense.Del@" "@D.tense.Inf@" 
, {s/he}  -> {we} "@R.subject.1Pl@" "@D.tense.Imm@" "@D.tense.Del@" "@D.tense.Inf@" 
, {s/he} -> {we and you} "@R.subject.21Pl@" "@D.tense.Imm@" "@D.tense.Del@" "@D.tense.Inf@" 
, {s/he} -> {you all} "@R.subject.2Pl@" "@D.tense.Imm@" "@D.tense.Del@" "@D.tense.Inf@" 
, {s/he} | {it} | {they} -> {they} "@R.subject.3Pl@" "@D.tense.Imm@" "@D.tense.Del@" "@D.tense.Inf@" 
, {s/he} | {it} | {they}  -> {s/he/they} "@R.subject.4Sg/Pl@" "@D.tense.Imm@" "@D.tense.Del@" "@D.tense.Inf@" 
, {s/he} -> {s/he/they over there} "@R.subject.5Sg/Pl@" "@D.tense.Imm@" "@D.tense.Del@" "@D.tense.Inf@" 
, {s/he} -> {someone} "@R.subject.X@" "@D.tense.Imm@" "@D.tense.Del@" "@D.tense.Inf@"
|| Bx _ Bx ] ;
define SubjectConversion

! Object Conversion
regex [ {s.o.} -> {me} "@R.object.1Sg@"
, {s.o.} -> {you} "@R.object.2Sg@"
, {s.o.} -> {him/her} "@R.object.3Sg@"
, {s.o.}  -> {us} "@R.object.1Pl@"
, {s.o.} -> {you and us} "@R.object.21Pl@"
, {s.o.} -> {you all} "@R.object.2Pl@"
, {s.o.}  -> {them} "@R.object.3Pl@"
, {s.o.}  -> {him/her/them} "@R.object.4Sg/Pl@"
, {s.o.}  -> {him/her/them over there} "@R.object.5Sg/Pl@"
, {s.o.} -> {someone} "@R.object.X@"
! , {s.o.} -> {someone} "@D.object@" ! Allows for generation of VTA phrase even if object feature is not specified
, {s.t.} -> {it} "@D.object@"
|| Bx _ \%' ]
,, [ [..] -> "@D.object@" || _ .#. ] ;
define ObjectConversion

! Reflexive Conversion
regex [ {him/herself} -> {myself} "@R.subject.1Sg@"
, {him/herself} -> {yourself} "@R.subject.2Sg@"
, {him/herself} -> {him/herself} "@R.object.3Sg@"
, {him/herself} -> {ourselves} "@R.object.1Pl@"
, {him/herself} -> {our/yourselves} "@R.object.21Pl@"
, {him/herself} -> {yourselves} "@R.object.2Pl@"
, {him/herself} -> {themselves} "@R.object.3Pl@"
, {him/herself} -> {him/her/themselves} "@R.object.4Sg/Pl@"
, {him/herself} -> {him/her/themselves} "@R.object.5Sg/Pl@"
, {him/herself} -> {him/herself} "@R.object.X@"
|| Bx _ ] ;
define ReflexiveConversion

! Possessive Conversion
regex [ {s.o.'s} -> {my} "@R.subject.1Sg@"
, {s.o.'s} -> {your} "@R.subject.2Sg@"
, {s.o.'s} -> {his/her} "@R.subject.3Sg@"
, {s.o.'s} -> {our} "@R.subject.1Pl@"
, {s.o.'s} -> {your and our} "@R.subject.21Pl@"
, {s.o.'s} -> {your} "@R.subject.2Pl@"
, {s.o.'s} -> {their} "@R.subject.3Pl@"
, {s.o.'s} -> {his/her/their} "@R.subject.4Sg/Pl@"
, {s.o.'s} -> {his/her/their} "@R.subject.5Sg/Pl@"
, {s.o.'s} -> {someone's} "@R.subject.X@"
|| Bx _ Bx ] ;
define PossessiveConversion

! Conversion of tags into flag-diacritics
regex [ "Prs+" -> "@P.tense.Prs@" , "Prt+" -> "@P.tense.Prt@" , "Fut+" -> "@P.tense.Fut@" , "Int+" -> "@P.tense.Int@" , "Cond+" -> "@P.tense.Cond@" , "Imm+" -> "@P.tense.Imm@" , "Del+" -> "@P.tense.Del@" , "Inf+" -> "@P.tense.Inf@" ]
.o. [ "Prog+" -> "@P.prog.Prog@" ]
.o. [ "Rept+" -> "@P.rept.Rept@" ]
.o. [ "1Sg+" -> "@P.subject.1Sg@" , "2Sg+" -> "@P.subject.2Sg@", "3Sg+" -> "@P.subject.3Sg@" , "1Pl+" -> "@P.subject.1Pl@" , "21Pl+" -> "@P.subject.21Pl@", "2Pl+" -> "@P.subject.2Pl@" , "3Pl+" -> "@P.subject.3Pl@" ,  "4Sg/Pl+" -> "@P.subject.4Sg/Pl@" , "5Sg/Pl+" -> "@P.subject.5Sg/Pl@", "X+" -> "@P.subject.X@" ]
.o. [ "1SgO+" -> "@P.object.1Sg@" , "2SgO+" -> "@P.object.2Sg@", "3SgO+" -> "@P.object.3Sg@" , "1PlO+" -> "@P.object.1Pl@" , "21PlO+" -> "@P.object.21Pl@", "2PlO+" -> "@P.object.2Pl@" , "3PlO+" -> "@P.object.3Pl@" ,  "4Sg/PlO+" -> "@P.object.4Sg/Pl@" , "5Sg/PlO+" -> "@P.object.5Sg/Pl@", "XO+" -> "@P.object.X@" ] ;
define TagConversion

! English verb inflection

! Definition of input and conversion
regex [ TenseAspect Subject (Object) (Progressive) (Repetitive) Letters+ ] ;
define Input

regex [ Input
.o. TagConversion
.o. Standardization
.o. VerbInflection
! .o. IrregularVerbs
.o. TenseAspectConversion
.o. BeInflection
.o. SubjectConversion
.o. ObjectConversion
.o. ReflexiveConversion
.o. PossessiveConversion
] ;

twosided flag-diacritics

define Letters [ Alphabet | Punctuation | Number | " " ] ;

define PFlags [ "@P.person.Sg@" | "@P.person.Pl@" | "@P.person.Obv@" | "@P.person.Loc@" | "@P.person.Distr@" | "@P.dim.Dim@" | "@D.dim.Dim@" | "@P.poss.1Sg@" | "@P.poss.2Sg@" | "@P.poss.3Sg@" | "@P.poss.1Pl@" | "@P.poss.12Pl@" | "@P.poss.2Pl@" | "@P.poss.3Pl@" | "@P.poss.4Sg/Pl@" | "@P.poss.X@" ] ;

define RFlags  [ "@R.person.Sg@" | "@R.person.Pl@" | "@R.person.Obv@" | "@R.person.Loc@" | "@R.person.Distr@" | "@R.dim.Dim@" | "@D.dim.Dim@" | "@R.poss.1Sg@" | "@R.poss.2Sg@" | "@R.poss.3Sg@" | "@R.poss.1Pl@" | "@R.poss.12Pl@" | "@R.poss.2Pl@" | "@R.poss.3Pl@" | "@R.poss.4Sg/Pl@" | "@R.poss.X@" ] ;

define RPossFlags  [ "@R.poss.1Sg@" | "@R.poss.2Sg@" | "@R.poss.3Sg@" | "@R.poss.1Pl@" | "@R.poss.12Pl@" | "@R.poss.2Pl@" | "@R.poss.3Pl@" | "@R.poss.4Sg/Pl@" | "@R.poss.X@" ] ;

define DFlags [ "@D.dim.Dim@" | "@D.poss@" ] ;

define Flags [ PFlags | RFlags | DFlags ] ;

! Plurals of most common irregular nouns

define EngIrregularNouns [ {man>s} -> {men} , {woman>s} -> {women} , {child>s} -> {children} , {mouse>s} -> {mice} , {foot>s} -> {feet} , {ox>s} -> {oxen}, {goose>s} -> {geese} , {wife>s} -> {wives} , {tooth>s} -> {teeth} , {addendum>s} -> {addenda} , {aircraft>s} -> {aircraft} , {alumna>s} -> {alumnae} , {alumnus>s} -> {alumni} , {analysis>s} -> {analyses} , {antithesis>s} -> {antitheses} , {appendix>s} -> {appendices} , {axis>s} -> {axes} , {bacillus>s} -> {bacilli} , {bacterium>s} -> {bacteria} , {basis>s} -> {bases} , {beau>s} -> {beaux} , {bison>s} -> {bison} , {bureau>s} -> {bureaus} , {codex>s} -> {codices} , {corpus>s} -> {corpora} , {crisis>s} -> {crises} , {criterion>s} -> {criteria} , {curriculum>s} -> {curricula} , {datum>s} -> {data} , {diagnosis>s} -> {diagnoses} , {die>s} -> {dice} , {ellipsis>s} -> {ellipses} , {erratum>s} -> {errata} , {focus>s} -> {foci} , {foot>s} -> {feet} , {fungus>s} -> {fungi} , {genus>s} -> {genera} , {graffito>s} -> {graffiti} , {half>s} -> {halves} , {hypothesis>s} -> {hypotheses} , {index>s} -> {indices} , {larva>s} -> {larvae} , {loaf>s} -> {loaves} , {locus>s} -> {loci} , {matrix>s} -> {matrices} , {medium>s} -> {media} , {memorandum>s} -> {memoranda} , {minutia>s} -> {minutiae} , {moose>s} -> {moose} , {nucleus>s} -> {nuclei} , {oasis>s} -> {oases} , {offspring>s} -> {offspring} , {ovum>s} -> {ova} , {parenthesis>s} -> {parentheses} , {phenomenon>s} -> {phenomena} , {phylum>s} -> {phyla} , {quiz>s} -> {quizzes} , {referendum>s} -> {referenda} , {salmon>s} -> {salmon} , {self>s} -> {selves} , {series>s} -> {series} , {sheep>s} -> {sheep} , {species>s} -> {species} , {stimulus>s} -> {stimuli} , {stratum>s} -> {strata} , {swine>s} -> {swine} , {syllabus>s} -> {syllabi} , {symposium>s} -> {symposia} , {synopsis>s} -> {synopses} , {thesis>s} -> {theses} , {thief>s} -> {thieves} , {trout>s} -> {trout} , {tuna>s} -> {tuna} , {vertebra>s} -> {vertebrae} , {vertex>s} -> {vertices} , {vita>s} -> {vitae} , {vortex>s} -> {vortices} , {wharf>s} -> {wharves} , {wolf>s} -> {wolves} ] ;

! Regular morphophonology for plural nouns: e-insertion + y-modification

define EngNounMorphophonology [ [ [ y ">" s ] -> {ies} || \Vowel _ ] ,, [ [..] -> e || [ s | z | x | s h | c h ] ">" _ s ] ] ;

! Rewrite rules

! Specification of input structure

regex [ Tags ("Dim+") (Possession) Letters+ ]

! Removal of parenthetical expressions
! .o. [ " "+ [ "[" \"]"+ "]" | "(" \")"+ ")" ] ] -> 0 ! Excluded as expands the FST almost ten-fold

! Conversion of tags to flag-diacritics
.o. [ "Sg+" -> "@P.number.Sg@" ,  "Pl+" -> "@P.number.Pl@" , "Obv+" -> "@P.number.Obv@" , "Loc+" -> "@P.number.Loc@" , "Distr+" -> "@P.number.Distr@" ]
.o. [ "Dim+" -> "@P.dim.Dim@" ]
.o. [ "Px1Sg+" -> "@P.poss.1Sg@" , "Px2Sg+" -> "@P.poss.2Sg@" , "Px3Sg+" -> "@P.poss.3Sg@" , "Px1Pl+" -> "@P.poss.1Pl@" , "Px12Pl+" -> "@P.poss.12Pl@" , "Px2Pl+" -> "@P.poss.2Pl@" , "Px3Pl+" -> "@P.poss.3Pl@" , "Px4Sg/Pl+" -> "@P.poss.4Sg/Pl@" ,, "PxX+" -> "@P.poss.X@" ]

! Removal of articles/possessors
.o. [ [ {A } | {a } | {An } | {an } | {The } | {the } | {My } | {my } ] -> 0 || [ [ .#. \Letters+ " " ] | [ Punctuation " " ] ] _ Letters ]

! Diminutive: insertion of 'little'
.o. [ [..] -> [ {little } "@R.dim.Dim@" ] | "@D.dim.Dim@" || [ [ .#. \Letters+ " " ] | [ Punctuation " " ] ] _ Letters ]

! Possession: insertion of possessive pronouns
.o. [ [..] -> {my } "@R.poss.1Sg@" || [.#. \Letters+ " " ] | [ Punctuation " " ] _ ]
| [ [..] -> {your } "@R.poss.2Sg@" || [.#. \Letters+ " " ] | [ Punctuation " " ] _ ]
| [ [..] -> {his/her } "@R.poss.3Sg@" || [.#. \Letters+ " " ] | [ Punctuation " " ] _ ]
| [ [..] -> {our } "@R.poss.1Pl@" || [.#. \Letters+ " " ] | [ Punctuation " " ] _ ]
| [ [..] -> {your and our } "@R.poss.12Pl@" || [.#. \Letters+ " " ] | [ Punctuation " " ] _ ]
| [ [..] -> {your } "@R.poss.2Pl@" || [.#. \Letters+ " " ] | [ Punctuation " " ] _ ]
| [ [..] -> {their } "@R.poss.3Pl@" || [.#. \Letters+ " " ] | [ Punctuation " " ] _ ]
| [ [..] -> {his/her/their } "@R.poss.4Sg/Pl@" || [.#. \Letters+ " " ] | [ Punctuation " " ] _ ]
| [ [..] -> {someone's } "@R.poss.X@" || [.#. \Letters+ " " ] | [ Punctuation " " ] _ ]
! Non-possessed constructions
| [ [..] -> "@D.poss@" || [.#. \Letters+ " " ] | [ Punctuation " " ] _ ]

! "Number", including obviation, locatives and distributives
.o. [ [..] -> [ {a> } "@R.number.Sg@" "@D.poss@" ] || [ [ .#. \Letters+ " " ] | [ Punctuation " " ] ] _ Letters ]
|    [ [..] -> [ "@R.number.Sg@" RPossFlags ] || [ [ .#. \Letters+ " " ] | [ Punctuation " " ] ] _ Letters ]
|   [ [..] -> [ {>s} "@R.number.Pl@" ] || \Punctuation _ [ .#. | Punctuation ] | [ { of } | { for } | { with } | { among } | { about } | { who } ] .o. {>s} -> 0 || {>s} \[ Punctuation | .#. ]+  _ ]
|   [ [..] -> [ { over there} "@R.number.Obv@" ] || \Punctuation _ [ .#. | Punctuation ] ]
! Locative forms are singular by default, and with an indefinite article unless possessed
|   [ [..] -> [ {in a> } "@R.number.Loc@" "@D.poss@" ] || [ .#. \Letters+ " " ] | [ Punctuation " " ] _ ]
|   [ [..] -> [ {in } "@R.number.Loc@" RPossFlags ] || [ .#. \Letters+ " " ] | [ Punctuation " " ] _ ]
! Distributive forms are made plural by default
|   [ [ [..] -> [ {among> } "@R.number.Distr@" ] || [ .#. \Letters+ " " ] | [ Punctuation " " ] _ ] .o. [ [..] -> [ {>s} "@R.number.Distr@" ] ||  _ [ .#. | Punctuation | [ { of } | { for } | { with } | { among } | { who } ] ] ] .o. [ {>s} -> 0 || {>s} \[ Punctuation | .#. ]+  _ ] ]

! Allomorphy for the indefinite article: <a> -> <an> | _ Vowel
.o. [ [..] -> n || { a>} _ " " \Letters+ Vowel ]

! Plural noun inflection
.o. EngIrregularNouns
.o. EngNounMorphophonology

! Removal of morpheme boundary
.o. ">" -> 0
;

twosided flag-diacritics

!! Old code

! .o. [ "Sg+" -> "@P.number.Sg@" , "Pl+" -> "@P.number.Pl@" , "Obv+" -> "@P.number.Obv@" , "Loc+" -> "@P.number.Loc@" || .#. _ ]
! .o. [ [ [..] -> {a } "@R.number.Sg@" || [ [ .#. ? ] | [ %, " " ] ] _ \Vowel ]
!       ,, [ [..] -> {an } "@R.number.Sg@" || [ [ .#. ? ] | [ %, " " ] ] _ Vowel ] ]
!     | [ [..] -> {>s} "@R.number.Pl@" ||  _ [ .#. | %, ] ]
!     | [ [..] -> { over there} "@R.number.Obv@" || _ [ .#. | "," ] ]
!     | [ [..] -> {in } "@R.number.Loc@" || [ [ .#. ? ] | [ %, " " ] ] _ ]

! regex [ Tags+ Letters+ ]
! .o. [ "Pl+" -> "@D.number@" "@P.number.Pl@" .o. "Sg+" -> "@P.number.Sg@" .o. "Dim+" -> "@R.dim.Dim@" ]
! .o. [ [..] -> "@P.dim.Dim@" {little } || [ .#. | [ [ %, | %; ] " " ] ] _ ] | [ [..] -> "@D.dim@" || _ .#. ]
! .o. [ [ [..] -> "@P.number.Sg@" {a } || [ .#. | [ [ %, | %; ] " " ] ] _ \Vowel ]
!       .o. [ [..] -> "@P.number.Sg@" {an } || [ .#. | [ [ %, | %; ] " " ] ] _ Vowel ] ]
! | [ [..] -> [ {>s} "@R.number.Pl@" ] || \[ "(" | "[" ] _ [ %, | .#. ] ] ;

! Code for testing en masse with CW English definitions:
! cat ~/altlab/crk/dicts/Wolvengrey.tsv| gawk -F"\t" 'NR>=2 && $3 ~ /^N/ { eng=$4; gsub("[ ]*\\([^\\)]+\\)","",eng); gsub("[ ]*\\[[^\\]]+\\]","",eng); gsub("\"","",eng); gsub("[ ]*[;]+",";",eng); gsub("[,;] [Ll]iteral[^,;]+","",eng); sub("[; ]+$","",eng); print "Distr+Dim+Px2Sg+ "eng; }' | flookup -q -b -x -i cw-eng-nouns.fsm | less