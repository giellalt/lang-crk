! Analyzer of English phrases
! Turns function words and constructions into features corresponding to crk morphology in full verb/noun paradigms.
! Leave non-function words as lexical content for searching from lexical eng-crk database.

!! GENERAL DEFINITIONS

define Bx [ " " | "." | "," | "!" | "?" | ":" | ";" | .#. ] ;

define Consonant [ b | c | d | f | g | h | j | k | l | m | n | p | q | r | s | t | v | w | x | z ]  ;

define Vowel [ a | e | i | o | u ] ;

define Capital [ A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z ] ;

define Alphabet [ Vowel | Consonant | "y" | Capital ] ;

define Punctuation [ "." | "," | ":" | ";" | "!" | "?" | "-" ] ;

define Number [ 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 ] ;

define Letters [ Alphabet | Punctuation | Number | " " ] ;

define PFlags [ "@P.subject.1Sg@" | "@P.subject.2Sg@" | "@P.subject.3Sg@" |  "@P.object.1Sg@" | "@P.subject.2Sg@" | "@P.subject.3Sg@" ] ;

define RFlags [ "@R.subject.1Sg@" | "@R.subject.2Sg@" | "@R.subject.3Sg@" |  "@R.object.1Sg@" | "@R.subject.2Sg@" | "@R.subject.3Sg@" ] ;

define DFlags [ "@D.object@" ] ;

define Flags [ PFlags | RFlags | DFlags ] ;

define SubjectTags [ "+1Sg" | "+2Sg" | "+3Sg" | "+1Pl" | "+21Pl" | "+2Pl" | "+3Pl" | "+X" |
define ObjectTags [ "+1SgO" | "+2SgO" | "+3SgO" | "+1PlO" | "+21PlO" | "+2PlO" | "+3PlO" | "+XO" ] ;
define TenseTags [ "+Prs" | "+Prt" | "+Fut" | "+Int" | "+Cond" | "+Inf" | "+Imp" | "+Imm" | "+Del" ] ;
define Tags [ SubjectTags | ObjectTags | TenseTags ] ;

!! VERBS

regex [ [ {we and you} | {you and we} | {you and I} ] -> "@P.subject.21Pl@" || Bx _ Bx ,,
{you all} -> "@P.subject.2Pl@" || Bx _ Bx ,,
[ {you and us} | {us and you} | {you and me} | {me and you} ] -> "@P.object.21Pl@" || Bx _ Bx
] .o. [ {I} -> "@P.subject.1Sg@" || Bx _ Bx ,,
{you} -> "@P.subject.2Sg@" || Bx _ Bx ,,
{he} | {she} -> "@P.subject.3Sg@" || Bx _ Bx ,,
{it} -> "@P.subject.0Sg@" || Bx _ Bx ,,
{there} -> "@P.subject.0Sg@" || .#. _ Bx ,,
{we} -> "@P.subject.1Pl@" || Bx _ Bx ,,
{they} -> "@P.subject.3Pl@" || Bx _ Bx ,,
{someone} -> "@P.subject.X@" || Bx _ Bx
] ;
define Subject

regex [ {for you all to} -> "@P.subject.2Pl@" "@P.tense.Inf@" || .#. _ " " ,,
{for you and us to} | {for you and we to} | {for you and me to} | {for us and you to} | { for we and you to} | {for me and you to} -> "@P.subject.21Pl@" "@P.tense.Inf@" || .#. _ " "
] .o. [ {for me to} -> "@P.subject.1Sg@" "@P.tense.Inf@" || .#. _ " " ,,
# [..] -> "@P.subject.2Sg@" || .#. _ \[ {I} | {you} | {he} | {she} | {it} | {we} | {they} | {someone} ] " " ,,
{for you to} -> "@P.subject.2Sg@" "@P.tense.Inf@" || .#. _ " " ,,
{for him to} | {for her to} -> "@P.subject.3Sg@" "@P.tense.Inf@" || .#. _ " " ,,
{for it to} | {for there to} -> "@P.subject.0Sg@" "@P.tense.Inf@" || .#. _ " " ,,
{for us to} -> "@P.subject.1Pl@" "@P.tense.Inf@" || .#. _ " " ,,
{for them to} -> "@P.subject.3Pl@" "@P.tense.Inf@" || .#. _ " " ,,
{for someone to} -> "@P.subject.X@" "@P.tense.Inf@" || .#. _ " "
]
.o.
[ {let you all} -> "@P.subject.2Pl@" "@P.tense.Imp@" || .#. _ " " ,,
{let you and us} | {let us and you} -> "@P.subject.21Pl@" "@P.tense.Imp@" || .#. _ " "
] .o. [ {let me} -> "@P.subject.1Sg@" "@P.tense.Imp@" || .#. _ " " ,,
! [..] -> "@P.subject.2Sg@" || .#. _ \[ {I} | {you} | {he} | {she} | {it} | {we} | {they} | {someone} ] " " ,,
{let you} -> "@P.subject.2Sg@" "@P.tense.Imp@" || .#. _ " " ,,
{let him} | {let her} -> "@P.subject.3Sg@" "@P.tense.Imp@" || .#. _ " " ,,
{let it} | {let there} | {when there} | {for there} -> "@P.subject.0Sg@" "@P.tense.Imp@" || .#. _ " " ,,
{let us} -> "@P.subject.1Pl@" "@P.tense.Imp@" || .#. _ " " ,,
{let them} -> "@P.subject.3Pl@" "@P.tense.Imp@" || .#. _ " " ,,
{let someone} -> "@P.subject.X@" "@P.tense.Imp@" || .#. _ " "
] ;
define ReverseSubject

regex [ {me} -> "@P.object.1Sg@" || Bx _ Bx ,,
{him} | {her} -> "@P.object.3Sg@" || Bx _ Bx ,,
{us} -> "@P.object.1Pl@" || Bx _ Bx ,,
{them} -> "@P.object.3Pl@" || Bx _ Bx
] ;
define Object

regex [ {myself} -> "@P.reflexive.1Sg@" || Bx _ Bx ,,
{yourself} -> "@P.reflexive.2Sg@" || Bx _ Bx ,,
{himself} | {herself} | {itself} -> "@P.reflexive.3Sg@" || Bx _ Bx ,,
{ourselves} -> "@P.reflexive.1Pl@" || Bx _ Bx ,,
{yourselves} -> "@P.reflexive.2Pl@" || Bx _ Bx ,,
{themselves} -> "@P.reflexive.3Pl@" || Bx _ Bx ,,
{oneself} -> "@P.reflexive.X@" || Bx _ Bx
] ;
define Reflexive

regex [ "@P.subject.2Sg@" -> "@P.object.2Sg@" || [ "@P.subject.1Sg@" | "@P.subject.2Sg@" | "@P.subject.3Sg@" | "@P.subject.0Sg@" | "@P.subject.1Pl@" | "@P.subject.21Pl@" | "@P.subject.2Pl@" | "@P.subject.3Pl@" | "@P.subject.X@" ] ?* _ ] ;
define 2SgO

regex [ "@P.subject.2Pl@" -> "@P.object.2Pl@" || [ "@P.subject.1Sg@" | "@P.subject.2Sg@" | "@P.subject.3Sg@" | "@P.subject.0Sg@" | "@P.subject.1Pl@" | "@P.subject.21Pl@" | "@P.subject.2Pl@" | "@P.subject.3Pl@" | "@P.subject.X@" ] ?* _ ] ;
define 2PlO

regex [ "@P.subject.3Sg@" -> "@P.object.3Sg@" || [ "@P.subject.1Sg@" | "@P.subject.2Sg@" | "@P.subject.3Sg@" | "@P.subject.0Sg@" | "@P.subject.1Pl@" | "@P.subject.21Pl@" | "@P.subject.2Pl@" | "@P.subject.3Pl@" | "@P.subject.X@" ] ?* _ ] ;
define 3SgO

regex [ "@P.subject.0Sg@" -> "@P.object.0Sg@" || [ "@P.subject.1Sg@" | "@P.subject.2Sg@" | "@P.subject.3Sg@" | "@P.subject.0Sg@" | "@P.subject.1Pl@" | "@P.subject.21Pl@" | "@P.subject.2Pl@" | "@P.subject.3Pl@" | "@P.subject.X@" ] ?* _ ] ;
define 0SgO

regex [ "@P.subject.X@" -> "@P.object.X@" || [ "@P.subject.1Sg@" | "@P.subject.2Sg@" | "@P.subject.3Sg@" | "@P.subject.0Sg" | "@P.subject.1Pl@" | "@P.subject.21Pl@" | "@P.subject.2Pl@" | "@P.subject.3Pl@" | "@P.subject.X@" ] ?* _ ] ;
define XO

regex [ {will} | [ [ {am} | {are} | {is} ] " "+ {going to} ] -> "@P.tense.Fut@" || Bx _ Bx ,,
[ {want} | {wants} ] " "+ {to} -> "@P.tense.Int@" || Bx _ Bx ,,
{when} -> "@P.tense.Cond@" || .#. _ Bx
] ;
define Tense

! read lexc src/transcriptions/cw-eng-verbs-prt2prs3.lexc
! define Past

regex [ {am} | {are} -> {is} ,
{was} | {were} -> {is} "@P.tense.Prt@" ,
{had} -> {has} "@P.tense.Prt@" ,
{did} -> {do} "@P.tense.Prt@" ,
{saw} -> {see} "@P.tense.Prt@" || Bx _ Bx
!!
! continue list of past tense -> present tense transformations here
! {past} -> {infinitive} "@P.tense.Prt@" ,
! {past} -> {infinitive} "@P.tense.Prt@" || Bx _ Bx
!!
] .o. [
! Productive past tense with the -ed suffix
[ {ed} -> "@P.tense.Prt@" || [ {I} | {you all} | {you} | {he} | {she} | {it} | {you and we} | {we} | {they} | {someone} ] " " \Bx+ _ Bx ]
.o. [ d -> "@P.tense.Prt@" || [ {I} | {you all} | {you} | {he} | {she} | {it} | {you and we} | {we} | {they} | {someone} ] " " \Bx^3 _ Bx ]
] ;
define Past

regex [ {es} -> 0 || [ {he} | {she} | {it} | {someone} ] " " \Bx+ _ Bx ]
.o. [ {s} -> 0 || [ {he} | {she} | {it} | {someone} ] " " \Bx+ _ Bx ];
define Prs3Sg

regex [ {now} (->) "@R.tense.Imp@" "@P.tense.Imm@" || Bx _ Bx ,,
{later} (->) "@R.tense.Imp@" "@P.tense.Del@" || Bx _ Bx
] ;
define Imperative

define SingleSpacing [ [ " " ]+ -> [ " " ] || \Bx _ \Bx ] ;

regex [ [..] -> "@R.tense.Fut@" "+Fut" || _ .#. ,,
[..] -> "@R.tense.Int@" "+Int" || _ .#. ,,
[..] -> "@R.tense.Cond@" "+Cond" || _ .#. ,,
[..] -> "@R.tense.Prt@" "+Prt" || _ .#. ,,
! [..] -> "@R.tense.Imp@" "+Imp" || _ .#. ,,
[..] -> "@R.tense.Imp@" "+Imm" || _ .#. ,,
[..] -> "@R.tense.Imm@" "+Imm" || _ .#. ,,
[..] -> "@R.tense.Del@" "+Del" || _ .#. ,,
[..] -> "@R.tense.Inf@" "+Inf" || _ .#. ,,
[..] -> "@D.tense@" || _ .#.
] .o. [
[..] -> "@R.subject.1Sg@" "+1Sg" || _ .#. ,,
[..] -> "@R.subject.2Sg@" "+2Sg" || _ .#. ,,
[..] -> "@R.subject.3Sg@" "+3Sg" || _ .#. ,,
[..] -> "@R.subject.0Sg@" "+0Sg" || _ .#. ,,
[..] -> "@R.subject.1Pl@" "+1Pl" || _ .#. ,,
[..] -> "@R.subject.21Pl@" "+21Pl" || _ .#. ,,
[..] -> "@R.subject.2Pl@" "+2Pl" || _ .#. ,,
[..] -> "@R.subject.3Pl@" "+3Pl" || _ .#. ,,
[..] -> "@R.subject.X@" "+X" || _ .#.
] .o. [
[..] -> "@R.reflexive.1Sg@" "+1SgR" || _ .#. ,,
[..] -> "@R.reflexive.2Sg@" "+2SgR" || _ .#. ,,
[..] -> "@R.reflexive.3Sg@" "+3SgR" || _ .#. ,,
[..] -> "@R.reflexive.1Pl@" "+1PlR" || _ .#. ,,
# [..] -> "@R.reflexive.21Pl@" "+21PlR" || _ .#. ,,
[..] -> "@R.reflexive.2Pl@" "+2PlR" || _ .#. ,,
[..] -> "@R.reflexive.3Pl@" "+3PlR" || _ .#. ,,
[..] -> "@R.reflexive.X@" "+XR" || _ .#. ,,
[..] -> "@D.reflexive@" || _ .#.
] .o. [
[..] -> "@R.object.1Sg@" "+1SgO" || _ .#. ,,
[..] -> "@R.object.2Sg@" "+2SgO" || _ .#. ,,
[..] -> "@R.object.3Sg@" "+3SgO" || _ .#. ,,
[..] -> "@R.object.0Sg@" "+0SgO" || _ .#. ,,
[..] -> "@R.object.1Pl@" "+1PlO" || _ .#. ,,
[..] -> "@R.object.21Pl@" "+21PlO" || _ .#. ,,
[..] -> "@R.object.2Pl@" "+2PlO" || _ .#. ,,
[..] -> "@R.object.3Pl@" "+3PlO" || _ .#. ,,
[..] -> "@R.object.X@" "+XO" || _ .#. ,,
[..] -> "@D.object@" || _ .#.
] ;
define VerbAnalysis

!! NOUNS

regex [ [ {your and our} | {our and your} ] -> "@P.poss.21Pl@" || Bx _ Bx
] .o. [ {my} -> "@P.poss.1Sg@" || Bx _ Bx ,,
{your} -> "@P.poss.2Sg@" || Bx _ Bx ,,
{his} | {her} | {its} -> "@P.poss.3Sg@" || Bx _ Bx ,,
{our} -> "@P.poss.1Pl@" || Bx _ Bx ,,
{their} -> "@P.poss.3Pl@" || Bx _ Bx ,,
{someone's} -> "@P.poss.X@" || Bx _ Bx
] ;
define Possession

regex [ [ {one} | {a} | {an} ] -> "@P.number.Sg@" || Bx _ Bx ,,
[ {many} | {several} ] -> "@P.number.Pl@" || Bx _ Bx ,,
[ {in} | {on} ] -> "@P.number.Loc@" || [ Bx - " " ] [ " " ]* _ Bx ,,
{among} -> "@P.number.Distr@" || [ Bx - " " ] [ " " ]* _ Bx ,,
{over there} -> "@P.number.Obv@" || Bx _ Bx
] ;
define NumberObvLocDistr

regex [ [ {little} | {lesser} | {smaller} | {younger} ] -> "@P.dim.Dim@" || Bx _ Bx ] ;
define Diminutive

regex [ {children} -> {child} "@P.number.Pl@" ,
{men} -> {man} "@P.number.Pl@" ,
{women} -> {woman} "@P.number.Pl@" || Bx _ Bx ]
!! Continue list of irregular noun plurals here
! {plural} -> {singular} "@P.number.Pl@" ,
! {plural} -> {singular} "@P.number.Pl@" || Bx _ Bx ]
! Regular plurals to singulars
.o. [ {es} -> "@P.number.Pl@" || \Bx _ [ Bx - " " ] | [ " " .#. ] ]
.o. [ {s} -> "@P.number.Pl@" || \Bx _ [ Bx - " " ] | [ " " .#. ] ]
;
define NounPl2Sg

regex [ "@P.number.Pl@" -> 0 || "@P.number.Distr@" ?* _ ] ;
define DistrVsPl

regex [ [..] -> "+Dim" "@R.dim.Dim@" || _ .#. ,,
[..] -> "@D.dim@" || _ .#.
] .o. [
[..] -> "+Px1Sg" "@R.poss.1Sg@" || _ .#. ,,
[..] -> "+Px2Sg" "@R.poss.2Sg@" || _ .#. ,,
[..] -> "+Px3Sg" "@R.poss.3Sg@" || _ .#. ,,
[..] -> "+Px1Pl" "@R.poss.1Pl@" || _ .#. ,,
[..] -> "+Px21Pl" "@R.poss.21Pl@" || _ .#. ,,
[..] -> "+Px2Pl" "@R.poss.2Pl@" || _ .#. ,,
[..] -> "+Px3Pl" "@R.poss.3Pl@" || _ .#. ,,
[..] -> "+PxX" "@R.poss.X@" || _ .#. ,,
[..] -> "@D.poss@" || _ .#.
] .o. [ [..] -> "+Pl" "@R.number.Pl@" || _ .#. ,,
[..] -> "+Obv" "@R.number.Obv@" || _ .#. ,,
[..] -> "+Loc" "@R.number.Loc@" || _ .#. ,,
[..] -> "+Distr" "@R.number.Distr@" || _ .#. ,,
[..] -> "+Pl" "@R.number.Pl@" || _ .#. ,,
[..] -> "+Sg" "@R.number.Sg@" || _ .#. ,,
[..] -> "+Sg" "@D.number@" || _ .#.
] ;
define NounAnalysis

!! Assigning +V (+II/AI/TI/TA) or +N as part-of-speech

regex [ [..] -> "+N" "@D.phrase.Verb@" || _ .#. ] ;
define NounClass

regex [ [..] -> "+V" "+TA" "@R.subject@" "@R.object@" "@D.object.0Sg@" || _ .#. ,,
[..] -> "+V" "+TI" "@R.subject@" "@R.object@" "@R.object.0Sg@" || _ .#. ,,
[..] -> "+V" "+AI" "@R.subject@" "@D.subject.0Sg@" "@D.object@" || _ .#. ,,
[..] -> "+V" "+II" "@R.subject@" "@R.subject.0Sg@" "@D.object@" || _ .#.
] ;
define VerbClass

regex [ [ {I} | {you} | {he} | {she} | {it} | {someone} | {we} | {they} | {me} | {him} | {us} | {them} ] -> "@P.phrase.Verb@" || Bx _ Bx ]
.o. [ {for there} | {let there} | {when there} | {there} | {There} -> "@P.phrase.Verb@" || .#. _ Bx ] ;
define VerbPhrase

regex [ [..] -> "@D.phrase.Verb@" || _ .#. ] ;
define NounPhrase

regex [ [..] -> " " || _ .#. ] ;
define InsertFinalSpace

regex [ Letters+ .o. InsertFinalSpace
.o. [ [ Past .o. Prs3Sg .o. ReverseSubject .o. Subject .o. Reflexive .o. Object .o. 2SgO .o. 2PlO .o. 3SgO .o. 0SgO .o. XO .o. Tense .o. Imperative .o. VerbClass .o. VerbAnalysis ]
| [ NounPl2Sg .o. VerbPhrase .o. NounPhrase .o. NumberObvLocDistr .o. Diminutive .o. Possession .o. DistrVsPl .o. NounClass .o. NounAnalysis ] ]
.o. SingleSpacing
] ;

twosided flag-diacritics

! save stack transcriptor-eng-phrase2crk-features
