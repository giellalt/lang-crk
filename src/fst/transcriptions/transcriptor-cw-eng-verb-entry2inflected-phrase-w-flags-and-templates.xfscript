! "Inflections" of English definitions for Cree verbs

define Consonant [ b | c | d | f | g | h | j | k | l | m | n | p | q | r | s | t | v | w | x | z ]  ;

define Vowel [ a | e | i | o | u | â | ê | î | ô | á | é | í | ó | ú | à | è | ì | ò | ù ] ;

define Capital [ A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z ] ;

define Alphabet [ Vowel | Consonant | "y" | Capital ] ;

define Punctuation [ "." | "," | ":" | ";" | "!" | "?" | "-" | "/" | "|" | "\" | %' | %" | "(" | ")" | "[" | "]" | "{" | "}" ] ;

define Symbols [ "@" | "#" | "$" | "€" | "£" | "§" | "%" | "&" | "+" | "*" | "<" | ">" | "+" | "=" | "~" | "^" ] ;

define Number [ 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 ] ;

define Letters [ Alphabet | Punctuation | Symbols | Number | " " ] ;

! define Bx [ " " | .#. | Punctuation ] ;

! define Px [ "," | ";" | .#. ] ;

define Clause [ "Cnj+" | "Rel+" ] ;

define Modality [ "Obl2+" | "Nec2+" | "Abl2+" | "Perm2+" | "Int2+" | "Hab+" | "Init+" | "Fin+" ] ;

define TenseAspect [ "Prs+" | "Prt+" | "Def+" | "Fut+" | "Int+" | "Cond+" | "Inf+" | "Imm+" | "Del+" | "Prf1+" | "Prf2+" ] ;

define Auxiliary [ "Obl+" | "Nec+" | "Abl+" | "Perm+" | "Int+" | "Poss+" | "Rec+" | "Pred+" ] ;

define Progressive [ "Prog+" ] ;

define Repetitive [ "Rept+" ] ;

define Negation [ "Neg+" ] ;

define Subject [ "0Sg+" | "1Sg+" | "2Sg+" | "3Sg+" | "1Du+" | "2Du+" | "3Du+" | "1Distr+" | "2Distr+" | "3Distr+" | "0Pl+" | "1Pl+" | "21Pl+" | "2Pl+" | "3Pl+" | "4Sg+" | "4Pl+" | "4Sg/Pl+" | "5Sg/Pl+" | "X+" | "XPl+" ] ;

define DirectObject [ "0SgO+" | "1SgO+" | "2SgO+" | "3SgO+" | "1DuO+" | "2DuO+" | "3DuO+" | "1DistrO+" | "2DistrO+" | "3DistrO+" | "0PlO+" | "1PlO+" | "21PlO+" | "2PlO+" | "3PlO+" | "4Sg/PlO+" | "5Sg/PlO+" | "XO+" | "XPlO+" ] ;

define IndirectObject [ "1SgIO+" | "2SgIO+" | "3SgIO+" | "1DuIO+" | "2DuIO+" | "3DuIO+" | "1PlIO+" | "21PlIO+" | "2PlIO+" | "3PlIO+" | "4Sg/PlIO+" | "5Sg/PlIO+" | "XIO+" | "XPlIO+" ] ;

! Variables for tenses/aspects/moods

define RsubjectPrs3Sg [ "@R.subject.3Sg@" | "@R.subject.4Sg@" | "@R.subject.1Distr@" | "@R.subject.2Distr@" | "@R.subject.3Distr@" | "@R.subject.X@" | "@R.subject.0Sg@" ] ;

! define RsubjectPrs3Sg [ "@R.subject.3Sg@" | "@R.subject.4Sg@" | "@R.subject.1Distr@" | "@R.subject.2Distr@" | "@R.subject.3Distr@" | "@R.subject.X@" | "@R.subject.0Sg@" | "@R.subject.4Sg/Pl@" | "@R.subject.5Sg/Pl@" ] ;

define DsubjectPrs3Sg [ "@D.subject.3Sg@" "@D.subject.4Sg@" "@D.subject.1Distr@" "@D.subject.2Distr@" "@D.subject.3Distr@" "@D.subject.X@" "@D.subject.0Sg@" ] ;

! define DsubjectPrs3Sg [ "@D.subject.3Sg@" "@D.subject.4Sg@" "@D.subject.1Distr@" "@D.subject.2Distr@" "@D.subject.3Distr@" "@D.subject.X@" "@D.subject.0Sg@" "@D.subject.4Sg/Pl@" "@D.subject.5Sg/Pl@" ] ;

define Rsubject2SgPl [ "@R.subject.2Sg@" | "@R.subject.2Du@" | "@R.subject.2Pl@" ] ;

define Dsubject2SgPl [ "@D.subject.2Sg@" "@D.subject.2Du@" "@D.subject.2Pl@" ] ;

define RsubjectDuPl [ "@R.subject.1Du@" | "@R.subject.2Du@" | "@R.subject.3Du@" | "@R.subject.1Pl@" | "@R.subject.21Pl@" | "@R.subject.2Pl@" | "@R.subject.3Pl@" | "@R.subject.4Pl@" | "@R.subject.XPl@" | "@R.subject.0Pl@" | "@R.subject.4Sg/Pl@" | "@R.subject.5Sg/Pl@" ] ;

! define RsubjectDuPl [ "@R.subject.1Du@" | "@R.subject.2Du@" | "@R.subject.3Du@" | "@R.subject.1Pl@" | "@R.subject.21Pl@" | "@R.subject.2Pl@" | "@R.subject.3Pl@" | "@R.subject.4Pl@" | "@R.subject.XPl@" | "@R.subject.0Pl@" ] ;

define DsubjectDuPl [ "@D.subject.1Du@" "@D.subject.2Du@" "@D.subject.3Du@" "@D.subject.1Pl@" "@D.subject.21Pl@" "@D.subject.2Pl@" "@D.subject.3Pl@" "@D.subject.4Pl@" "@D.subject.4Sg/Pl@" "@D.subject.5Sg/Pl@" "@D.subject.XPl@" "@D.subject.0Pl@" ] ;

! define DsubjectDuPl [ "@D.subject.1Du@" "@D.subject.2Du@" "@D.subject.3Du@" "@D.subject.1Pl@" "@D.subject.21Pl@" "@D.subject.2Pl@" "@D.subject.3Pl@" "@D.subject.4Pl@" "@D.subject.XPl@" "@D.subject.0Pl@" ] ;


define Px [ "." | "," | ":" | ";" | "!" | "?" | .#. ] ;

define Bx [ Px | " " ] ;

! (Word-boundary character set - non-printable characters and space)
define Wx [ \[ Letters ] | " " ] ; 

! Marking non-subject occurrences of 'it'
regex [ {it} -> IT || " " _ [ "." | "," | .#. ] ,, {it} -> IT || Alphabet " " _ ,, {it} -> IT || "(" _ ,, {it} -> IT || _ ")" ] ;
define itNonSubjectMarking

regex [ {is} -> ISZ || [ Wx | Bx ] [ {s/he} | {S/he} | {he} | {He} | {she} | {She} | {it} | {It} | IT ] { } _ [ Wx | Bx ] ]
.o. [ [ {s/he} | {S/he} | {he} | {He} | {she} | {She} | {they} | {They} ] -> SUBJ
, {it} -> SUBJinanim
, [ {him/herself} | {her/himself} | {himself} | {herself} | {themselves} | {themself} | {oneself} ] -> RFLX
, [ {s.o.'s} | {his} ] -> POSS
, [ {s.o.} | {him} | {them} | {him/her} | {her/him} | {him, her or them} | {him/her or them} | {her/him or them} ] @-> DOBJ
, [ {s.t.} | IT ] -> DOBJinanim
, {to s.b.} -> {to } IOBJ
, {for s.b.} -> {for } IOBJ
, {there is} -> THERE { } ISZ
|| [ Wx | Bx ] _ [ Wx | Bx ] ] ;
define Standardization

regex [ s -> {>s} "@D.neg@" "@D.prog.Prog@" [ "@R.tense.Prs@" | "@R.tense.Cond@" ] RsubjectPrs3Sg
, s -> {>ed} "@D.neg@" "@D.prog.Prog@" "@R.tense.Prt@"
, s -> {>en} "@D.prog.Prog@" [ "@R.tense.Prf1@" | "@R.tense.Prf2@" ]
, s -> {>ing} "@R.prog.Prog@"
, s -> {>} [ [ [ "@R.tense.Prs@" | "@R.tense.Cond@" ] DsubjectPrs3Sg "@D.neg@" "@D.prog.Prog@" ]
| [ [ "@R.tense.Prs@" | "@R.tense.Cond@" | "@R.tense.Prt@" ] "@R.neg.Neg@" "@D.prog.Prog@" ]
| [ [ "@R.tense.Fut@" | "@R.tense.Def@" | "@R.tense.Int@" | "@R.tense.Inf@" | "@R.tense.Imm@" | "@R.tense.Del@" | "@R.tense.Obl@" | "@R.tense.Nec@" | "@R.tense.Abl@" | "@R.tense.Perm@" | "@R.tense.Poss@" | "@R.tense.Rec@" | "@R.tense.Pred@" ] "@D.prog.Prog@" ] ]
|| [ SUBJ | SUBJinanim | THERE ] Wx+ Alphabet+ _ [ Wx | Bx ] ] ;
! ] ;
define VerbInflection

regex [ {ha>} -> {have}
, {ha>ed}-> {had}
, {ha>ing} -> {hav>ing}
, {doe>} -> {do}
, {doe>ed} -> {did}
, {doe>ing} -> {do>ing}
|| Wx _ Wx ] ;
define IrregularVerbs

! Be-copula inflection
regex [ IS | ISZ -> {be} [ "@R.tense.Def@" | "@R.tense.Int@" | "@R.tense.Imm@" | "@R.tense.Del@" | "@R.tense.Inf@" ]
, IS | ISZ -> {am} "@R.subject.1Sg@" [ "@R.tense.Prs@" | "@R.tense.Cond@" | "@R.tense.Fut@" ]
, IS | ISZ -> {are} [ "@R.subject.2Sg@" | RsubjectDuPl ] [ "@R.tense.Prs@" | "@R.tense.Fut@" | "@R.tense.Cond@" ]
, IS | ISZ -> {is} RsubjectPrs3Sg [ "@R.tense.Prs@" | "@R.tense.Fut@" | "@R.tense.Cond@" ]
, IS | ISZ -> {was} [ "@D.subject.2Sg@" DsubjectDuPl ] "@R.tense.Prt@"
, IS | ISZ -> {were} [ "@R.subject.2Sg@" | RsubjectDuPl ] "@R.tense.Prt@"
|| Wx _ Wx ] ;
define BeInflection

regex [ [..] -> { who} "@R.clause.Rel@"
| "@D.clause.Rel@"
|| SUBJ _
,, [..] -> { which} "@R.clause.Rel@"
| "@D.clause.Rel@"
|| SUBJinanim _
] ;
define Relativization

regex [ {s} -> {>ing} [ "@R.aux.Hab@" | "@R.aux.Init@" | "@R.aux.Fin@" ]
| {>} [ "@R.aux.Obl@" | "@R.aux.Nec@" | "@R.aux.Abl@" | "@R.aux.Perm@" | "@R.aux.Int@" ]
| {s} "@D.aux@"
|| [ SUBJ | SUBJinanim ] { } Alphabet+ _ [ Wx | Bx ] ]
.o. [ ISZ -> {being} [ "@R.aux.Hab@" | "@R.aux.Init@" | "@R.aux.Fin@" ]
| {be} [ "@R.aux.Obl@" | "@R.aux.Nec@" | "@R.aux.Abl@" | "@R.aux.Perm@" | "@R.aux.Int@" ]
| ISZ "@D.aux@"
|| [ SUBJ | SUBJinanim | THERE ] { } _ ] ;
define VerbInflection2

regex [ [..] -> {keeps on} "@R.aux.Hab@" { }
| {has to} "@R.aux.Obl@" { }
| {needs to} "@R.aux.Nec@" { }
| {wants to} "@R.aux.Int@" { }
| ISZ { able to} "@R.aux.Abl@" { }
| ISZ { allowed to} "@R.aux.Perm@" { }
| {starts} "@R.aux.Init@" { }
| {finishes} "@R.aux.Fin@" { }
| "@D.aux@"
|| [ SUBJ | SUBJinanim | THERE ] { } _ ] ;
define ModalAuxiliary

regex [
! Present tense / (Future) conditional
[..] -> [ [ "@R.tense.Prs@" | "@R.tense.Cond@" ] "@D.neg@" "@D.prog@"
| { does not} [ "@R.tense.Prs@" | "@R.tense.Cond@" ] "@R.neg.Neg@" "@D.prog@" RsubjectPrs3Sg
| { do not} [ "@R.tense.Prs@" | "@R.tense.Cond@" ] "@R.neg.Neg@" "@D.prog@" DsubjectPrs3Sg
| { } IS [ "@R.tense.Prs@" | "@R.tense.Cond@" ] "@D.neg@" "@R.prog.Prog@"
| { } IS { not} [ "@R.tense.Prs@" | "@R.tense.Cond@" ] "@R.neg.Neg@" "@R.prog.Prog@"
! Past tense
| "@R.tense.Prt@" "@D.neg@" "@D.prog@"
| { did not} "@R.tense.Prt@" "@R.neg.Neg@" "@D.prog@"
| { } IS "@R.tense.Prt@" "@D.neg@" "@R.prog.Prog@"
| { } IS { not} "@R.tense.Prt@" "@R.neg.Neg@" "@R.prog.Prog@"
! Future prospective
| { } IS { going to} "@R.tense.Fut@" "@D.neg@" "@D.prog@"
| { } IS { not going to} "@R.tense.Fut@" "@R.neg.Neg@" "@D.prog@"
| { } IS { going to be} "@R.tense.Fut@" "@D.neg@" "@R.prog.Prog@"
| { } IS { not going to be} "@R.tense.Fut@" "@R.neg.Neg@" "@R.prog.Prog@"
! Future definite
| { will} "@R.tense.Def@" "@D.neg@" "@D.prog@"
| { will not} "@R.tense.Def@" "@R.neg.Neg@" "@D.prog@"
| { will be} "@R.tense.Def@" "@D.neg@" "@R.prog.Prog@"
| { will not be} "@R.tense.Def@" "@R.neg.Neg@" "@R.prog.Prog@"
! Obligation
| { must} "@R.tense.Obl@" "@D.neg@" "@D.prog@"
| { must not} "@R.tense.Obl@" "@R.neg.Neg@" "@D.prog@"
| { must be} "@R.tense.Obl@" "@D.neg@" "@R.prog.Prog@"
| { must not be} "@R.tense.Obl@" "@R.neg.Neg@" "@R.prog.Prog@"
! Present Perfect
| { has} "@R.tense.Prf1@" "@D.neg@" "@D.prog@" RsubjectPrs3Sg
| { have} "@R.tense.Prf1@" "@D.neg@" "@D.prog@" DsubjectPrs3Sg
| { has not} "@R.tense.Prf1@" "@R.neg.Neg@" "@D.prog@" RsubjectPrs3Sg
| { have not} "@R.tense.Prf1@" "@R.neg.Neg@" "@D.prog@" DsubjectPrs3Sg
| { has been} "@R.tense.Prf1@" "@D.neg@" "@R.prog.Prog@" RsubjectPrs3Sg
| { have been} "@R.tense.Prf1@" "@D.neg@" "@R.prog.Prog@" DsubjectPrs3Sg
| { has not been} "@R.tense.Prf1@" "@R.neg.Neg@" "@R.prog.Prog@" RsubjectPrs3Sg
| { have not been} "@R.tense.Prf1@" "@R.neg.Neg@" "@R.prog.Prog@" DsubjectPrs3Sg
! Past Perfect
| { had} "@R.tense.Prf2@" "@D.neg@" "@D.prog@"
| { had not} "@R.tense.Prf2@" "@R.neg.Neg@" "@D.prog@"
| { had been} "@R.tense.Prf2@" "@D.neg@" "@R.prog.Prog@"
| { had not been} "@R.tense.Prf2@" "@R.neg.Neg@" "@R.prog.Prog@"
! Necessity
| { needs to} "@R.tense.Nec@" "@D.neg@" "@D.prog@" RsubjectPrs3Sg
| { need to} "@R.tense.Nec@" "@D.neg@" "@D.prog@" DsubjectPrs3Sg
| { need not} "@R.tense.Nec@" "@R.neg.Neg@" "@D.prog@"
| { needs to be} "@R.tense.Nec@" "@D.neg@" "@R.prog.Prog@" RsubjectPrs3Sg
| { need to be} "@R.tense.Nec@" "@D.neg@" "@R.prog.Prog@" DsubjectPrs3Sg
| { need not be} "@R.tense.Nec@" "@R.neg.Neg@" "@R.prog.Prog@"
! Ability
| { can} "@R.tense.Abl@" "@D.neg@" "@D.prog@"
| { cannot} "@R.tense.Abl@" "@R.neg.Neg@" "@D.prog@"
| { can be} "@R.tense.Abl@" "@D.neg@" "@R.prog.Prog@"
| { cannot be} "@R.tense.Abl@" "@R.neg.Neg@" "@R.prog.Prog@"
! Permission
| { may} "@R.tense.Perm@" "@D.neg@" "@D.prog@"
| { may not} "@R.tense.Perm@" "@R.neg.Neg@" "@D.prog@"
| { may be} "@R.tense.Perm@" "@D.neg@" "@R.prog.Prog@"
| { may not be} "@R.tense.Perm@" "@R.neg.Neg@" "@R.prog.Prog@"
! Possibility
| { could} "@R.tense.Poss@" "@D.neg@" "@D.prog@"
| { could not} "@R.tense.Poss@" "@R.neg.Neg@" "@D.prog@"
| { could be} "@R.tense.Poss@" "@D.neg@" "@R.prog.Prog@"
| { could not be} "@R.tense.Poss@" "@R.neg.Neg@" "@R.prog.Prog@"
! Recommendation
| { should} "@R.tense.Rec@" "@D.neg@" "@D.prog@"
| { should not} "@R.tense.Rec@" "@R.neg.Neg@" "@D.prog@"
| { should be} "@R.tense.Rec@" "@D.neg@" "@R.prog.Prog@"
| { should not be} "@R.tense.Rec@" "@R.neg.Neg@" "@R.prog.Prog@"
! Prediction
| { would} "@R.tense.Pred@" "@D.neg@" "@D.prog@"
| { would not} "@R.tense.Pred@" "@R.neg.Neg@" "@D.prog@"
| { would be} "@R.tense.Pred@" "@D.neg@" "@R.prog.Prog@"
| { would not be} "@R.tense.Pred@" "@R.neg.Neg@" "@R.prog.Prog@"
! (Future) intentional
| { wants to} "@R.tense.Int@" "@D.neg@" "@D.prog@" RsubjectPrs3Sg
| { want to} "@R.tense.Int@" "@D.neg@" "@D.prog@" DsubjectPrs3Sg
| { does not want to} "@R.tense.Int@" "@R.neg.Neg@" "@D.prog@" RsubjectPrs3Sg
| { do not want to} "@R.tense.Int@" "@R.neg.Neg@" "@D.prog@" DsubjectPrs3Sg
| { wants to be} "@R.tense.Int@" "@D.neg@" "@R.prog.Prog@" RsubjectPrs3Sg
| { want to be} "@R.tense.Int@" "@D.neg@" "@R.prog.Prog@" DsubjectPrs3Sg
| { does not want to be} "@R.tense.Int@" "@R.neg.Neg@" "@R.prog.Prog@" RsubjectPrs3Sg
| { do not want to be} "@R.tense.Int@" "@R.neg.Neg@" "@R.prog.Prog@" DsubjectPrs3Sg
! Infinitive
| { to} "@R.tense.Inf@" "@D.neg@" "@D.prog@"
| { to not} "@R.tense.Inf@" "@R.neg.Neg@" "@D.prog@"
| { to be} "@R.tense.Inf@" "@D.neg@" "@R.prog.Prog@"
| { to not be} "@R.tense.Inf@" "@R.neg.Neg@" "@R.prog.Prog@"
! Immediate imperative
| "@R.tense.Imm@" "@D.neg@" "@D.prog@"
| "@R.tense.Imm@" "@R.neg.Neg@" "@D.prog@" Dsubject2SgPl
| { do not} "@R.tense.Imm@" "@R.neg.Neg@" "@D.prog@" Rsubject2SgPl
| { be} "@R.tense.Imm@" "@R.neg.Neg@" "@R.prog.Prog@" Dsubject2SgPl
| { be} "@R.tense.Imm@" "@D.neg@" "@R.prog.Prog@"
| { do not be} "@R.tense.Imm@" "@R.neg.Neg@" "@R.prog.Prog@" Rsubject2SgPl
! Delayed imperative
| "@R.tense.Del@" "@D.neg@" "@D.prog@"
| "@R.tense.Del@" "@R.neg.Neg@" "@D.prog@" Dsubject2SgPl
| { do not} "@R.tense.Del@" "@R.neg.Neg@" "@D.prog@" Rsubject2SgPl
| { be} "@R.tense.Del@" "@R.neg.Neg@" "@R.prog.Prog@" Dsubject2SgPl
| { be} "@R.tense.Del@" "@D.neg@" "@R.prog.Prog@"
| { do not be} "@R.tense.Del@" "@R.neg.Neg@" "@R.prog.Prog@" Rsubject2SgPl ]
|| Wx [ SUBJ | SUBJinanim | THERE ] _ { } \ISZ \ISZ
] ;
define AuxiliaryPhrase

regex [
! Present tense / (Future) conditional
ISZ -> [ IS [ "@R.tense.Prs@" | "@R.tense.Cond@" ] "@D.neg@" "@D.prog@"
| IS { not} [ "@R.tense.Prs@" | "@R.tense.Cond@" ] "@R.neg.Neg@" "@D.prog@" ! RsubjectPrs3Sg
! | IS { not} [ "@R.tense.Prs@" | "@R.tense.Cond@" ] "@R.neg.Neg@" "@D.prog@" DsubjectPrs3Sg ! Duplicate?
| IS { being} [ "@R.tense.Prs@" | "@R.tense.Cond@" ] "@D.neg@" "@R.prog.Prog@"
| IS { not being} [ "@R.tense.Prs@" | "@R.tense.Cond@" ] "@R.neg.Neg@" "@R.prog.Prog@"
! Past tense
| IS "@R.tense.Prt@" "@D.neg@" "@D.prog@"
| IS { not} "@R.tense.Prt@" "@R.neg.Neg@" "@D.prog@"
| IS { being} "@R.tense.Prt@" "@D.neg@" "@R.prog.Prog@"
| IS { not being} "@R.tense.Prt@" "@R.neg.Neg@" "@R.prog.Prog@"
! Future prospective
| IS { going to be} "@R.tense.Fut@" "@D.neg@" "@D.prog@"
| IS { not going to be} "@R.tense.Fut@" "@R.neg.Neg@" "@D.prog@"
| IS { going to be being} "@R.tense.Fut@" "@D.neg@" "@R.prog.Prog@"
| IS { not going to be being} "@R.tense.Fut@" "@R.neg.Neg@" "@R.prog.Prog@"
! Future definite
| {will be} "@R.tense.Def@" "@D.neg@" "@D.prog@"
| {will not be} "@R.tense.Def@" "@R.neg.Neg@" "@D.prog@"
| {will be being} "@R.tense.Def@" "@D.neg@" "@R.prog.Prog@"
| {will not be being} "@R.tense.Def@" "@R.neg.Neg@" "@R.prog.Prog@"
! Present perfective
| {has been} "@R.tense.Prf1@" "@D.neg@" "@D.prog@" RsubjectPrs3Sg
| {have been} "@R.tense.Prf1@" "@D.neg@" "@D.prog@" DsubjectPrs3Sg
| {has not been} "@R.tense.Prf1@" "@R.neg.Neg@" "@D.prog@" RsubjectPrs3Sg
| {have not been} "@R.tense.Prf1@" "@R.neg.Neg@" "@D.prog@" DsubjectPrs3Sg
| {has been being} "@R.tense.Prf1@" "@D.neg@" "@R.prog.Prog@" RsubjectPrs3Sg
| {have been being} "@R.tense.Prf1@" "@D.neg@" "@R.prog.Prog@" DsubjectPrs3Sg
| {has not been being} "@R.tense.Prf1@" "@R.neg.Neg@" "@R.prog.Prog@" RsubjectPrs3Sg
| {have not been being} "@R.tense.Prf1@" "@R.neg.Neg@" "@R.prog.Prog@" DsubjectPrs3Sg
! Past perfective
| {had been} "@R.tense.Prf2@" "@D.neg@" "@D.prog@"
| {had not been} "@R.tense.Prf2@" "@R.neg.Neg@" "@D.prog@"
| {had been being} "@R.tense.Prf2@" "@D.neg@" "@R.prog.Prog@"
| {had not been being} "@R.tense.Prf2@" "@R.neg.Neg@" "@R.prog.Prog@"
! Obligation
| {must be} "@R.tense.Obl@" "@D.neg@" "@D.prog@"
| {must not be} "@R.tense.Obl@" "@R.neg.Neg@" "@D.prog@"
| {must be being} "@R.tense.Obl@" "@D.neg@" "@R.prog.Prog@"
| {must not be being} "@R.tense.Obl@" "@R.neg.Neg@" "@R.prog.Prog@"
! Necessity
| {needs to be} "@R.tense.Nec@" "@D.neg@" "@D.prog@" RsubjectPrs3Sg
| {need to be} "@R.tense.Nec@" "@D.neg@" "@D.prog@" DsubjectPrs3Sg
| {need not be} "@R.tense.Nec@" "@R.neg.Neg@" "@D.prog@"
| {needs to be being} "@R.tense.Nec@" "@D.neg@" "@R.prog.Prog@" RsubjectPrs3Sg
| {need to be being} "@R.tense.Nec@" "@D.neg@" "@R.prog.Prog@" DsubjectPrs3Sg
| {need not be being} "@R.tense.Nec@" "@R.neg.Neg@" "@R.prog.Prog@"
! Ability
| {can be} "@R.tense.Abl@" "@D.neg@" "@D.prog@"
| {cannot be} "@R.tense.Abl@" "@R.neg.Neg@" "@D.prog@"
| {can be being} "@R.tense.Abl@" "@D.neg@" "@R.prog.Prog@"
| {cannot be being} "@R.tense.Abl@" "@R.neg.Neg@" "@R.prog.Prog@"
! Permission
| {may be} "@R.tense.Perm@" "@D.neg@" "@D.prog@"
| {may not be} "@R.tense.Perm@" "@R.neg.Neg@" "@D.prog@"
| {may be being} "@R.tense.Perm@" "@D.neg@" "@R.prog.Prog@"
| {may not be being} "@R.tense.Perm@" "@R.neg.Neg@" "@R.prog.Prog@"
! Possibility
| {could be} "@R.tense.Poss@" "@D.neg@" "@D.prog@"
| {could not be} "@R.tense.Poss@" "@R.neg.Neg@" "@D.prog@"
| {could be being} "@R.tense.Poss@" "@D.neg@" "@R.prog.Prog@"
| {could not be being} "@R.tense.Poss@" "@R.neg.Neg@" "@R.prog.Prog@"
! Recommendation
| {should be} "@R.tense.Rec@" "@D.neg@" "@D.prog@"
| {should not be} "@R.tense.Rec@" "@R.neg.Neg@" "@D.prog@"
| {should be being} "@R.tense.Rec@" "@D.neg@" "@R.prog.Prog@"
| {should not be being} "@R.tense.Rec@" "@R.neg.Neg@" "@R.prog.Prog@"
! Prediction
| {would be} "@R.tense.Pred@" "@D.neg@" "@D.prog@"
| {would not be} "@R.tense.Pred@" "@R.neg.Neg@" "@D.prog@"
| {would be being} "@R.tense.Pred@" "@D.neg@" "@R.prog.Prog@"
| {would not be being} "@R.tense.Pred@" "@R.neg.Neg@" "@R.prog.Prog@"
! Future intentional
| {wants to be} "@R.tense.Int@" "@D.neg@" "@D.prog@" RsubjectPrs3Sg
| {want to be} "@R.tense.Int@" "@D.neg@" "@D.prog@" DsubjectPrs3Sg
| {does not want to be} "@R.tense.Int@" "@R.neg.Neg@" "@D.prog@" RsubjectPrs3Sg
| {do not want to be} "@R.tense.Int@" "@R.neg.Neg@" "@D.prog@" DsubjectPrs3Sg
| {wants to be being} "@R.tense.Int@" "@D.neg@" "@R.prog.Prog@" RsubjectPrs3Sg
| {want to be being} "@R.tense.Int@" "@D.neg@" "@R.prog.Prog@" DsubjectPrs3Sg
| {does not want to be being} "@R.tense.Int@" "@R.neg.Neg@" "@R.prog.Prog@" RsubjectPrs3Sg
| {do not want to be being} "@R.tense.Int@" "@R.neg.Neg@" "@R.prog.Prog@" DsubjectPrs3Sg
! Infinitive
| {to be} "@R.tense.Inf@" "@D.neg@" "@D.prog@"
| {to not be} "@R.tense.Inf@" "@R.neg.Neg@" "@D.prog@"
| {to be being} "@R.tense.Inf@" "@D.neg@" "@R.prog.Prog@"
| {to not be being} "@R.tense.Inf@" "@R.neg.Neg@" "@R.prog.Prog@"
! Immediate imperative
| {be} "@R.tense.Imm@" "@D.neg@" "@D.prog@"
| {be} "@R.tense.Imm@" "@R.neg.Neg@" "@D.prog@" Dsubject2SgPl
| {do not be} "@R.tense.Imm@" "@R.neg.Neg@" "@D.prog@" Rsubject2SgPl
| {be being} "@R.tense.Imm@" "@R.prog.Prog@" Dsubject2SgPl
| {be being} "@R.tense.Imm@" "@D.neg.Neg@" "@R.prog.Prog@" Rsubject2SgPl
| {do not be being} "@R.tense.Imm@" "@R.neg.Neg@" "@R.prog.Prog@" Rsubject2SgPl
! Delayed imperative
| {be} "@R.tense.Del@" "@D.neg@" "@D.prog@"
| {be} "@R.tense.Del@" "@R.neg.Neg@" "@D.prog@" Dsubject2SgPl
| {do not be} "@R.tense.Del@" "@R.neg.Neg@" "@D.prog@" Rsubject2SgPl
| {be being} "@R.tense.Del@" "@R.prog.Prog@" Dsubject2SgPl
| {be being} "@R.tense.Del@" "@D.neg.Neg@" "@R.prog.Prog@" Rsubject2SgPl
| {do not be being} "@R.tense.Del@" "@R.neg.Neg@" "@R.prog.Prog@" Rsubject2SgPl ]
|| [ THERE | SUBJinanim | SUBJ ] { } ( "@D.aux@" ) _
] ;
define BeAuxiliaryPhrase

regex [
[..] -> "@R.clause.Cnj@" "@D.tense.Inf@" "@D.tense.Imm@" "@D.tense.Del@" {as }
| "@R.tense.Cond@" "@D.clause@" {when }
| "@R.tense.Inf@" "@D.clause@" {for }
| [ "@R.tense.Imm@" | "@R.tense.Del@" ] Dsubject2SgPl "@D.neg@" {let }
| [ "@R.tense.Imm@" | "@R.tense.Del@" ] Dsubject2SgPl "@R.neg@" {do not let }
| "@D.clause.Cnj@" "@D.tense.Cond@" "@D.tense.Inf@" [ [ "@D.tense.Imm@" "@D.tense.Del@" ] | [ [ "@R.tense.Imm@" | "@R.tense.Del@" ] Rsubject2SgPl ] ]
|| _ [ SUBJ | SUBJinanim | THERE ] ! Wx* { } [ IS | "@D.aux@" {be} | \"@D.aux@" \{be} | {will} | {to} ] ] ! context needs checking for redundancy
] ;
define PhrasePrefix

regex [
[..] -> { now} "@R.tense.Imm@"
| { later} "@R.tense.Del@"
| "@D.tense.Imm@" "@D.tense.Del@"
|| _ Px ]
.o. [ [..] -> { again and again} "@R.rept.Rept@" | "@D.rept.Rept@"
|| _ Px ] ;
define PhraseSuffix

! Indirect Object Conversion
regex [ IOBJ -> {me} "@R.recipient.1Sg@"
, IOBJ -> {you} "@R.recipient.2Sg@"
, IOBJ -> {him/her} "@R.recipient.3Sg@"
, IOBJ -> {us both} "@R.recipient.1Du@"
, IOBJ -> {you both} "@R.recipient.2Du@"
, IOBJ -> {them both} "@R.recipient.3Du@"
, IOBJ -> {us} "@R.recipient.1Pl@"
, IOBJ -> {you and us} "@R.recipient.21Pl@"
, IOBJ -> {you all} "@R.recipient.2Pl@"
, IOBJ -> {them} "@R.recipient.3Pl@"
! , IOBJ -> {him/her/them} "@R.recipient.4Sg/Pl@"
, IOBJ -> {another/others} "@R.recipient.4Sg/Pl@"
! , IOBJ -> {him/her/them over there} "@R.recipient.5Sg/Pl@"
, IOBJ -> {another/others over there} "@R.recipient.5Sg/Pl@"
, IOBJ -> {someone} "@R.recipient.X@" "@D.neg@"
, IOBJ -> {anyone} "@R.recipient.X@" "@R.neg.Neg@"
, IOBJ -> {some people} "@R.recipient.XPl@"
, IOBJ -> {someone} "@D.recipient@"
|| Wx [ {to } | {for } ] _ ] ;
define IObjectConversion

! Subject Inverse Conversion
regex [ SUBJ -> {me} "@R.subject.1Sg@" [ "@R.tense.Imm@" | "@R.tense.Del@" | "@R.tense.Inf@" ]  
, SUBJ -> {you} "@R.subject.2Sg@" "@R.tense.Inf@"
, SUBJ -> {(you)} "@R.subject.2Sg@" [ "@R.tense.Imm@" | "@R.tense.Del@" ]  
, SUBJ -> {him/her} "@R.subject.3Sg@" [ "@R.tense.Imm@" | "@R.tense.Del@" | "@R.tense.Inf@" ]  
, SUBJinanim -> {it} [ "@R.subject.3Sg@" | "@R.subject.0Sg@" ] [ "@R.tense.Imm@" | "@R.tense.Del@" | "@R.tense.Inf@" ]  
, SUBJ -> {us} "@R.subject.1Pl@" [ "@R.tense.Imm@" | "@R.tense.Del@" | "@R.tense.Inf@" ]  
, SUBJ -> {us both} "@R.subject.1Du@" [ "@R.tense.Imm@" | "@R.tense.Del@" | "@R.tense.Inf@" ]  
, SUBJ -> {each and every one of us} "@R.subject.1Distr@" [ "@R.tense.Imm@" | "@R.tense.Del@" | "@R.tense.Inf@" ]  
, SUBJ -> {you and us} "@R.subject.21Pl@" [ "@R.tense.Imm@" | "@R.tense.Del@" | "@R.tense.Inf@" ]  
, SUBJ -> {you both} "@R.subject.2Du@" "@R.tense.Inf@"
, SUBJ -> {each and every one of you} "@R.subject.2Distr@" "@R.tense.Inf@"
, SUBJ -> {you all} "@R.subject.2Pl@" "@R.tense.Inf@"
, SUBJ -> {(you both)} "@R.subject.2Du@" [ "@R.tense.Imm@" | "@R.tense.Del@" ]  
, SUBJ -> {(you all)} "@R.subject.2Pl@" [ "@R.tense.Imm@" | "@R.tense.Del@" ]  
, SUBJ | SUBJinanim -> {them} [ "@R.subject.3Pl@" | "@R.subject.0Pl@" ] [ "@R.tense.Imm@" | "@R.tense.Del@" | "@R.tense.Inf@" ]  
, SUBJ | SUBJinanim -> {them both} "@R.subject.3Du@" [ "@R.tense.Imm@" | "@R.tense.Del@" | "@R.tense.Inf@" ]  
, SUBJ | SUBJinanim -> {each and every one of them} "@R.subject.3Distr@" [ "@R.tense.Imm@" | "@R.tense.Del@" | "@R.tense.Inf@" ]  
, SUBJinanim -> {it over there} "@R.subject.4Sg@" [ "@R.tense.Imm@" | "@R.tense.Del@" | "@R.tense.Inf@" ]  
, SUBJinanim -> {them over there} "@R.subject.4Pl@" [ "@R.tense.Imm@" | "@R.tense.Del@" | "@R.tense.Inf@" ]  
! , SUBJ -> {him/her/them} "@R.subject.4Sg/Pl@" [ "@R.tense.Imm@" | "@R.tense.Del@" | "@R.tense.Inf@" ]  
! , SUBJ -> {him/her/them over there} "@R.subject.5Sg/Pl@" [ "@R.tense.Imm@" | "@R.tense.Del@" | "@R.tense.Inf@" ]  
, SUBJ -> {another/others} "@R.subject.4Sg/Pl@" [ "@R.tense.Imm@" | "@R.tense.Del@" | "@R.tense.Inf@" ]  
, SUBJ -> {another/others over there} "@R.subject.5Sg/Pl@" [ "@R.tense.Imm@" | "@R.tense.Del@" | "@R.tense.Inf@" ]  
, SUBJ -> {someone} "@R.subject.X@" [ "@R.tense.Imm@" | "@R.tense.Del@" | "@R.tense.Inf@" ]
, SUBJ -> {people} "@R.subject.XPl@" [ "@R.tense.Imm@" | "@R.tense.Del@" | "@R.tense.Inf@" ]
|| Wx _ Wx ]

! Subject Conversion
| [ SUBJ -> {I} "@R.subject.1Sg@" "@D.tense.Imm@" "@D.tense.Del@" "@D.tense.Inf@" 
, SUBJ  -> {you} "@R.subject.2Sg@" "@D.tense.Imm@" "@D.tense.Del@" "@D.tense.Inf@" 
, SUBJ -> {he/she} "@R.subject.3Sg@" "@D.tense.Imm@" "@D.tense.Del@" "@D.tense.Inf@" 
, SUBJinanim -> {it} [ "@R.subject.3Sg@" | "@R.subject.0Sg@" ] "@D.tense.Imm@" "@D.tense.Del@" "@D.tense.Inf@" 
, SUBJ -> {we} "@R.subject.1Pl@" "@D.tense.Imm@" "@D.tense.Del@" "@D.tense.Inf@" 
, SUBJ -> {we both} "@R.subject.1Du@" "@D.tense.Imm@" "@D.tense.Del@" "@D.tense.Inf@" 
, SUBJ -> {each and every one of us} "@R.subject.1Distr@" "@D.tense.Imm@" "@D.tense.Del@" "@D.tense.Inf@" 
, SUBJ -> {we and you} "@R.subject.21Pl@" "@D.tense.Imm@" "@D.tense.Del@" "@D.tense.Inf@" 
, SUBJ -> {you both} "@R.subject.2Du@" "@D.tense.Imm@" "@D.tense.Del@" "@D.tense.Inf@" 
, SUBJ -> {each and every one of you} "@R.subject.2Distr@" "@D.tense.Imm@" "@D.tense.Del@" "@D.tense.Inf@" 
, SUBJ -> {you all} "@R.subject.2Pl@" "@D.tense.Imm@" "@D.tense.Del@" "@D.tense.Inf@" 
, SUBJ | SUBJinanim -> {they} [ "@R.subject.3Pl@" | "@R.subject.0Pl@" ] "@D.tense.Imm@" "@D.tense.Del@" "@D.tense.Inf@" 
, SUBJ | SUBJinanim -> {they both} "@R.subject.3Du@" "@D.tense.Imm@" "@D.tense.Del@" "@D.tense.Inf@" 
, SUBJ | SUBJinanim -> {each and every one of them} "@R.subject.3Distr@" "@D.tense.Imm@" "@D.tense.Del@" "@D.tense.Inf@" 
, SUBJ | SUBJinanim -> {it over there} "@R.subject.4Sg@" "@D.tense.Imm@" "@D.tense.Del@" "@D.tense.Inf@" 
, SUBJ | SUBJinanim -> {they over there} "@R.subject.4Pl@" "@D.tense.Imm@" "@D.tense.Del@" "@D.tense.Inf@" 
! , SUBJ | SUBJinanim -> {s/he/they} "@R.subject.4Sg/Pl@" "@D.tense.Imm@" "@D.tense.Del@" "@D.tense.Inf@" 
! , SUBJ -> {s/he/they over there} "@R.subject.5Sg/Pl@" "@D.tense.Imm@" "@D.tense.Del@" "@D.tense.Inf@" 
, SUBJ | SUBJinanim -> {another/others} "@R.subject.4Sg/Pl@" "@D.tense.Imm@" "@D.tense.Del@" "@D.tense.Inf@" 
, SUBJ -> {another/others over there} "@R.subject.5Sg/Pl@" "@D.tense.Imm@" "@D.tense.Del@" "@D.tense.Inf@" 
, SUBJ -> {someone} "@R.subject.X@" "@D.tense.Imm@" "@D.tense.Del@" "@D.tense.Inf@"
, SUBJ -> {people} "@R.subject.XPl@" "@D.tense.Imm@" "@D.tense.Del@" "@D.tense.Inf@"
|| Wx _ Wx ] ;
define SubjectConversion

! Object Conversion
regex [ DOBJ -> {me} "@R.object.1Sg@"
, DOBJ -> {you} "@R.object.2Sg@"
, DOBJ -> {him/her} "@R.object.3Sg@"
, DOBJ -> {us} "@R.object.1Pl@"
, DOBJ -> {us both} "@R.object.1Du@"
, DOBJ -> {each and every one of us} "@R.object.1Distr@"
, DOBJ -> {you and us} "@R.object.21Pl@"
, DOBJ -> {you both} "@R.object.2Du@"
, DOBJ -> {each and every one of you} "@R.object.2Distr@"
, DOBJ -> {you all} "@R.object.2Pl@"
, DOBJ -> {them both} "@R.object.3Du@"
, DOBJ -> {each and every one of them} "@R.object.3Distr@"
, DOBJ -> {them} "@R.object.3Pl@"
! , DOBJ -> {him/her/them} "@R.object.4Sg/Pl@"
! , DOBJ -> {him/her/them over there} "@R.object.5Sg/Pl@"
, DOBJ -> {another/others} "@R.object.4Sg/Pl@"
, DOBJ -> {another/others over there} "@R.object.5Sg/Pl@"
, DOBJ -> {someone} "@R.object.X@" "@D.Neg@"
, DOBJ -> {anyone} "@R.object.X@" "@R.neg.Neg@"
, DOBJ -> {people} "@R.object.XPl@"
, DOBJ -> {someone} "@D.object@" "@D.neg@" ! Allows for generation of VTA phrase even if object feature is not specified
, DOBJ -> {anyone} "@D.object@" "@R.neg.Neg@" ! Allows for generation of VTA phrase even if object feature is not specified
, DOBJinanim -> {it} "@R.object.0Sg@"
, DOBJinanim -> {them} "@R.object.0Pl@"
, DOBJinanim -> {something} "@D.object@" "@D.neg@"
, DOBJinanim -> {anything} "@D.object@" "@R.neg.Neg@"
|| Wx _ Wx ]
,, [ [..] -> "@D.object@" || _ .#. ] ;
define ObjectConversion

! Reflexive Conversion
regex [ RFLX -> {myself} "@R.subject.1Sg@"
, RFLX -> {yourself} "@R.subject.2Sg@"
, RFLX -> {him/herself} "@R.subject.3Sg@"
, RFLX -> {itself} "@R.subject.0Sg@"
, RFLX -> {ourselves} "@R.subject.1Du@"
, RFLX -> {ourselves} "@R.subject.1Pl@"
, RFLX -> {your/ourselves} "@R.subject.21Pl@"
, RFLX -> {yourselves} "@R.subject.2Du@"
, RFLX -> {yourselves} "@R.subject.2Pl@"
, RFLX -> {themselves} [ "@R.subject.3Pl@" | "@R.subject.0Pl@" ]
, RFLX -> {themselves} "@R.subject.3Du@"
, RFLX -> {him/her/themselves} "@R.subject.4Sg/Pl@"
, RFLX -> {him/her/themselves} "@R.subject.5Sg/Pl@"
, RFLX -> {him/herself} "@R.subject.X@"
, RFLX -> {themselves} "@R.subject.XPl@"
|| Wx _ ] ;
define ReflexiveConversion

! Possessive Conversion
regex [ POSS -> {my} "@R.subject.1Sg@"
, POSS -> {your} "@R.subject.2Sg@"
, POSS -> {his/her} "@R.subject.3Sg@"
, POSS -> {its} "@R.subject.0Sg@"
, POSS -> {our} "@R.subject.1Pl@"
, POSS -> {our} "@R.subject.1Du@"
, POSS -> {your and our} "@R.subject.21Pl@"
, POSS -> {your} "@R.subject.2Du@"
, POSS -> {your} "@R.subject.2Pl@"
, POSS -> {their} "@R.subject.3Du@"
, POSS -> {their} [ "@R.subject.3Pl@" | "@R.subject.0Pl@" ]
, POSS -> {his/her/their} "@R.subject.4Sg/Pl@"
, POSS -> {his/her/their} "@R.subject.5Sg/Pl@"
, POSS -> {someone's} "@R.subject.X@" "@D.neg@"
, POSS -> {anyone's} "@R.subject.X@" "@R.neg.Neg@"
, POSS -> {their} "@R.subject.XPl@"
|| Wx _ Wx ] ;
define PossessiveConversion

! Conversion of tags into flag-diacritics
regex [ "Cnj+" -> "@P.clause.Cnj@" , "Rel+" -> "@P.clause.Rel@" , "Obl2+" -> "@P.aux.Obl@" , "Nec2+" -> "@P.aux.Nec@" , "Abl2+" -> "@P.aux.Abl@" , "Perm2+" -> "@P.aux.Perm@" , "Int2+" -> "@P.aux.Int@" , "Hab+" -> "@P.aux.Hab@" , "Init+" -> "@P.aux.Init@" , "Fin+" -> "@P.aux.Fin@" ]
.o. [ "Prs+" -> "@P.tense.Prs@" , "Prt+" -> "@P.tense.Prt@" , "Def+" -> "@P.tense.Def@" , "Fut+" -> "@P.tense.Fut@" , "Int+" -> "@P.tense.Int@" , "Cond+" -> "@P.tense.Cond@" , "Imm+" -> "@P.tense.Imm@" , "Del+" -> "@P.tense.Del@" , "Inf+" -> "@P.tense.Inf@" , "Obl+" -> "@P.tense.Obl@" , "Nec+" -> "@P.tense.Nec@" , "Abl+" -> "@P.tense.Abl@" , "Perm+" -> "@P.tense.Perm@" , "Poss+" -> "@P.tense.Poss@" , "Rec+" -> "@P.tense.Rec@" , "Pred+" -> "@P.tense.Pred@" , "Prf1+" -> "@P.tense.Prf1@" , "Prf2+" -> "@P.tense.Prf2@" ]
.o. [ "Prog+" -> "@P.prog.Prog@" ]
.o. [ "Rept+" -> "@P.rept.Rept@" ]
.o. [ "Neg+" -> "@P.neg.Neg@" ]
.o. [ "0Sg+" -> "@P.subject.0Sg@" , "1Sg+" -> "@P.subject.1Sg@" , "2Sg+" -> "@P.subject.2Sg@", "3Sg+" -> "@P.subject.3Sg@" , "1Du+" -> "@P.subject.1Du@" , "2Du+" -> "@P.subject.2Du@" , "3Du+" -> "@P.subject.3Du@" , "1Distr+" -> "@P.subject.1Distr@" , "2Distr+" -> "@P.subject.2Distr@", "3Distr+" -> "@P.subject.3Distr@", "0Pl+" -> "@P.subject.0Pl@" , "1Pl+" -> "@P.subject.1Pl@" , "21Pl+" -> "@P.subject.21Pl@", "2Pl+" -> "@P.subject.2Pl@" , "3Pl+" -> "@P.subject.3Pl@" , "4Sg+" -> "@P.subject.4Sg@" , "4Pl+" -> "@P.subject.4Pl@" , "4Sg/Pl+" -> "@P.subject.4Sg/Pl@" , "5Sg/Pl+" -> "@P.subject.5Sg/Pl@", "X+" -> "@P.subject.X@" , "XPl+" -> "@P.subject.XPl@" ]
.o. [ "0SgO+" -> "@P.object.0Sg@" , "1SgO+" -> "@P.object.1Sg@" , "2SgO+" -> "@P.object.2Sg@", "3SgO+" -> "@P.object.3Sg@" , "1DuO+" -> "@P.object.1Du@" , "2DuO+" -> "@P.object.2Du@", "3DuO+" -> "@P.object.3Du@" , "1DistrO+" -> "@P.object.1Distr@", "2DistrO+" -> "@P.object.2Distr@" , "3DistrO+" -> "@P.object.3Distr@" , "0PlO+" -> "@P.object.0Pl@" , "1PlO+" -> "@P.object.1Pl@" , "21PlO+" -> "@P.object.21Pl@", "2PlO+" -> "@P.object.2Pl@" , "3PlO+" -> "@P.object.3Pl@" ,  "4Sg/PlO+" -> "@P.object.4Sg/Pl@" , "5Sg/PlO+" -> "@P.object.5Sg/Pl@", "XO+" -> "@P.object.X@" , "XPlO+" -> "@P.object.XPl@" ]
.o. [ "1SgIO+" -> "@P.recipient.1Sg@" , "2SgIO+" -> "@P.recipient.2Sg@" , "3SgIO+" -> "@P.recipient.3Sg@" ,  "1DuIO+" -> "@P.recipient.1Du@" , "2DuIO+" -> "@P.recipient.2Du@" , "3DuIO+" -> "@P.recipient.3Du@" , "1PlIO+" -> "@P.recipient.1Pl@" , "21PlIO+" -> "@P.recipient.21Pl@" , "2PlIO+" -> "@P.recipient.2Pl@" , "3PlIO+" -> "@P.recipient.3Pl@" , "4Sg/PlIO+" -> "@P.recipient.4Sg/Pl@" , "5Sg/PlIO+" -> "@P.recipient.5Sg/Pl@" , "XIO+" -> "@P.recipient.X@" , "XPlIO+" -> "@P.recipient.XPl@" ] ;
define Tag2FlagConversion

! Undoing special marking of non-subject 'it' and existential 'there'
regex [ IT -> {it} , THERE -> {there} || [ Wx | Bx ] _ [ Wx | Bx ] ] ;
define itNonSubjectUnmarking

! Resolving irregularities of the spelling of English (irregular and regular) verb wordforms

read lexc src/transcriptions/cw-eng-verbs-prs3Sg2inf.lexc
define EngInf

regex [ EngInf -> || [ Wx | Bx ] _ [ Wx | Bx ] ] ;
define EngInf2Inf

read lexc src/transcriptions/cw-eng-verbs-prs3Sg2prt.lexc
define EngPrt

regex [ EngPrt -> || [ Wx | Bx ] _ [ Wx | Bx ] ] ;
define EngPrt2Prt

read lexc src/transcriptions/cw-eng-verbs-prs3Sg2prf.lexc
define EngPrf

regex [ EngPrf -> || [ Wx | Bx ] _ [ Wx | Bx ] ] ;
define EngPrf2Prf

read lexc src/transcriptions/cw-eng-verbs-prs3Sg2prog.lexc
define EngProg

regex [ EngProg -> || [ Wx | Bx ] _ [ Wx | Bx ] ] ;
define EngProg2Prog

source src/transcriptions/phonology-eng.xfscript
define EngPhon

regex [ ">" -> 0 || Alphabet+ _ Alphabet* ] ;
define RemoveSuffixBoundary

! Definition of input and conversion
regex [ (Clause | Modality) [ TenseAspect | Auxiliary ] Subject (DirectObject) (IndirectObject) (Progressive) (Repetitive) (Negation) Letters+ ] ;
define Input

regex [ Input
.o. itNonSubjectMarking
.o. Standardization
.o. VerbInflection2
.o. ModalAuxiliary
.o. Tag2FlagConversion
.o. VerbInflection
.o. IrregularVerbs
.o. AuxiliaryPhrase
.o. BeAuxiliaryPhrase
.o. PhrasePrefix
.o. PhraseSuffix
.o. Relativization
.o. BeInflection
.o. IObjectConversion
.o. SubjectConversion
.o. ObjectConversion
.o. ReflexiveConversion
.o. PossessiveConversion
.o. itNonSubjectUnmarking
! Resolving orthographically correct forms for listed English inflected wordforms 
.o. EngInf2Inf
.o. EngPrt2Prt
.o. EngPrf2Prf
.o. EngProg2Prog
! Making best guess of correct wordform for non-listed wordforms
.o. EngPhon
.o. RemoveSuffixBoundary
] ;

twosided flag-diacritics
