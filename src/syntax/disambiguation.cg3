# -*- cg-pre-pipe: "$GTHOME/gtcore/scripts/preprocess --abbr=$GTHOME/langs/crk/tools/preprocess/abbr.txt | hfst-optimised-lookup  $GTHOME/langs/crk/src/analyser-disamb-gt-desc.hfstol | $GTHOME/gtcore/scripts/lookup2cg" -*-


#   ============================ #
#!! !!!Plains Cree disambiguator 
#   ============================ #


# ========== #
# Delimiters #
# ========== #


DELIMITERS = "<.>" "<!>" "<?>" "<¶>";



# ============= #
# Tags and sets #
# ============= #


# ========
   SETS
# ========

LIST BOS = (>>>) (<s>); 
LIST EOS = (<<<) (</s>); # vislcg and CG-2 together.

LIST N = N ;
LIST V = V ;

LIST Ipc = Ipc ;
LIST Interj = Interj ;

LIST Adv = Adv ;
LIST CC = CC ;
LIST CS = CS ;

LIST AN = AN ;
LIST IN = IN ;

LIST IA = AI ;
LIST II = II ;
LIST TA = TA ;
LIST TI = TI ;


LIST Cnj = Cnj ;
LIST ConNeg = ConNeg ;
LIST Cond = Cond ;
LIST Def = Def ;
LIST Del = Del ;
LIST Dem = Dem ;
LIST Dim = Dim ;
LIST Dim/Der = Dim/Der ;
LIST Dist = Dist ;
LIST Fut = Fut ;
LIST Imm = Imm ;
LIST Imp = Imp ;
LIST Incl = Incl ;
LIST Ind = Ind ;
LIST Inf = Inf ;
LIST Int = Int ;
LIST Interr = Interr ;
LIST Loc = Loc ;
LIST Med = Med ;
LIST Neg = Neg ;
LIST Num = Num ;
LIST Obv =  Obv ;
LIST Pos = Pos ;
LIST Prf = Prf ;
LIST Pron = Pron ;
LIST Prox = Prox ;
LIST Prs = Prs ;
LIST Prt = Prt ;
LIST Qst = Qst ;
LIST Sbj = Sbj ;

LIST SgO = SgO ;
LIST P2lO = P2lO ;
LIST Pl = Pl ;
LIST PlO = PlO ;
LIST 12Pl = 12Pl ;
LIST 1Pl = 1Pl ;
LIST 1PlO = 1PlO ;
LIST Sg = Sg ;
LIST 1Sg = 1Sg ;
LIST 1SgO = 1SgO ;
LIST 2Pl = 2Pl ;
LIST 2Sg = 2Sg ;
LIST 2SgO = 2SgO ;
LIST 3Pl = 3Pl ;
LIST 3PlO = 3PlO ;
LIST 3Sg = 3Sg ;
LIST 3SgO = 3SgO ;
LIST 4Pl = 4Pl ;
LIST 4PlO = 4PlO ;
LIST 4Sg = 4Sg ;
LIST 4SgO = 4SgO ;
LIST 5Sg = 5Sg ;
LIST 4Sg/Pl = 4Sg/Pl ;
LIST 4Sg/PlO = 4Sg/PlO ;

LIST Px12Pl = Px12Pl ;
LIST Px1Pl = Px1Pl ;
LIST Px1Sg = Px1Sg ;
LIST Px2Pl = Px2Pl ;
LIST Px2Sg = Px2Sg ;
LIST Px3Pl = Px3Pl ;
LIST Px3Sg = Px3Sg ;
LIST Px4Pl = Px4Pl ;
LIST Px4Sg = Px4Sg ;
LIST Der/Dim = Der/Dim ;

LIST CLB = CLB ;

LIST PV/kah = "PV/kah" ;
LIST RdplS = "RdplS" ;
LIST @Act = @Act ;
LIST @Goal = @Goal ;

# Sets
# ====

LIST WORD = N V Ipc Interj Pron ;


SET NOT-VERB = WORD - V ;
SET NOT-NOUN = WORD - N ;

LIST NUMBER = Sg Pl ;
LIST GENDER = AN IN ;
SET NUMBERGENDER = (AN Sg) OR (AN Pl) OR (IN Sg) OR (IN PL) ;

# Noun sets

LIST HUMAN = "awâsis" "okimâw" "iyiniw" "iskwêw" ;

# Boundary sets

# Complementary set

# Case sets

# Some case, but not...

LIST COMMA = (",") ;
SET MARK =  COMMA | ("\\") | ("\;") ; #"

LIST PUNCT-LEFT = (PUNCT LEFT) ;
LIST PUNCT-RIGHT = (PUNCT RIGHT) ;
SET PRE-APP   = COMMA OR PUNCT-LEFT ;

# Here come the rules #

BEFORE-SECTIONS 

SECTION

# Different taste, different analysis
#SELECT PV/kah IF (0 RdplS) ;
REMOVE PV/kah IF (0 RdplS) ;

# We remove the particle if the word can be something more interesting:
SELECT:ChooseIpc Ipc IF (0 N OR V) ;

# Sentence-final niyâ is a particle
SELECT:1SgIfV1Sg 1Sg if (0 ("niya"))(*0C V + 1Sg);
	
# We go for derivation, more to look at when we are searching a lemme in Korp:
SELECT:DerYes Der/Dim (0C N) ;

# We say postnominal words are determiners, not particles, if they agree
REMOVE:DemNotIpc Ipc (-1 N + $$NUMBERGENDER)(0 Pron + Dem + $$NUMBERGENDER) ;
REMOVE:DemNotIpc Ipc ( 1 N + $$NUMBERGENDER)(0 Pron + Dem + $$NUMBERGENDER) ;
	## Mîcisowinâhtik ôma.

# Demonstratives follow nouns.
SELECT:DemNotIpcDN Dem (0 Ipc)(1 N) ;
SELECT:DemNotIpcND Dem (-1 N)(0 Ipc) ;

SELECT:OmaIpc Ipc (0 ("ôma"))(-1 NOT-NOUN OR BOS)(1 NOT-NOUN OR CLB);

SELECT:DefSubj Def IF (1 4Sg/Pl);

#This rule to come after the ones above.
REMOVE:DemNotDef Def IF (0 Dem);

# Interrogatives in questions
REMOVE:InterrNotN N (0 Interr)(NOT *-1 Interr)(*1 ("?"));

# NP-internal agreement
REMOVE:SgAgr Sg (0 N OR Pron)(1C Dem + Pl) ;
REMOVE:PlAgr Pl (0 N OR Pron)(1C Dem + Sg) ;

# N Px number agreement
REMOVE:PxSg Px3Pl (-1 N + Sg);
REMOVE:PxPl Px3Sg (-1 N + Pl);

# Singular object
REMOVE:SgIfObjSg 3PlO (0 3SgO)(*0 Sg + Obv);
REMOVE:PlIfObjSg 3SgO (0 3SgO)(*0 Pl + Obv);

# Mood rules -- do not understand moods yet

REMOVE Fut (0 Ind);
REMOVE Imp (0 Ind)(*0 N + Sg);

REMOVE:2SgWrong 2Sg IF (0 ("<.*ân>"r) + 1Sg) ;
REMOVE:12PlWrong 12Pl IF (0 ("<.*âhk>"r) + 1Pl) ;

#Actor and goal rules for 3 and 3’ animate nouns
MAP:TAGoalObv @Goal TARGET Obv IF (*0 TA + 4Sg/PlO BARRIER V) ;
MAP:TAGoal3 @Goal TARGET N + AN IF (NOT 0 Obv LINK *0 TA + 3PlO OR 3SgO BARRIER V) ;
MAP:TAActor @Act TARGET N + AN IF (NOT 0 Obv LINK *0 TA + 3Pl OR 3Sg BARRIER V) ;

#TI and AI actors
MAP:AITIActor @Act TARGET N + AN IF (*0 IA OR TI + 3Pl OR 3Sg OR 4Sg/Pl BARRIER V) ;

#II actors
MAP:IIActor3 @Act TARGET N + IN IF (*0 II + 3Sg OR II + 3Pl BARRIER V) ;
MAP:IIActor4 @Act TARGET N + IN + Px3Sg OR Px3Pl IF (*0 II + 4Sg OR II + 4Pl BARRIER V) ;

#kikway disambiguation
REMOVE:kikway Pron IF (0 ("kîkway")) ;
SELECT:INkikway IN IF (0 ("kîkway") LINK *0 TI) ;

#ka-ki disambiguation
SELECT:kaPrt Prt IF (0 ("PV/kaa") + ("<kâ-.*>"r)) ;

#2>3/3>4 disambiguation
SELECT:disambig23Sg 3Sg IF (0 TA + ("<.*ât>"r)) ;
SELECT:disambig23Pl 3Pl IF (0 TA + ("<.*âcik>"r)) ;

AFTER-SECTIONS 

