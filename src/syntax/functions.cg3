#Distributed under the terms of the GNU General Public License version 2 
# or any later version.

# ==================================================================== #
#    N O R T H E R N  S Á M I  D I S A M B I G U A T O R               
# ==================================================================== #
# ==================================================================== 

#  Sámi language technology project 2003-2006, University of Tromsø # 


# ========== #
# Delimiters #
# ========== #

DELIMITERS = "<.>" "<!>" "<?>" "<...>" "<¶>";

#PARENTHESES = "<$(>" "<$)>" "<$[>" "<$]>" "<${>" "<$}>" "<$«>" "<$»>" ;

# ============= #
# Tags and sets #
# ============= #

SETS

# I define end of clause and beginning of clause in a way so that the file
# may be read both by the CG-2 and the vislcg formalisms.

LIST BOS = (>>>) (<s>);
LIST EOS = (<<<) (</s>);

# CG3 doesn´t function without >>> and <<< !

# Tags declared as single-membered LISTs 
# ======================================

# Parts of speech
# ---------------


LIST BOS = (>>>) (<s>); 
LIST EOS = (<<<) (</s>); # vislcg and CG-2 together.

LIST N = N ;
LIST V = V ;

LIST Ipc = Ipc ;
LIST Interj = Interj ;

LIST Adv = Adv ;
LIST CC = CC ;
LIST CS = CS ;

LIST AN = AN ;
LIST IN = IN ;

LIST AI = AI ;
LIST II = II ;
LIST TA = TA ;
LIST TI = TI ;


LIST Cnj = Cnj ;
LIST ConNeg = ConNeg ;
LIST Cond = Cond ;
LIST Def = Def ;
LIST Interr = Interr ;
LIST Del = Del ;
LIST Dim = Dim ;
LIST Dim/Der = Dim/Der ;
LIST Dist = Dist ;
LIST Fut = Fut ;
LIST Imm = Imm ;
LIST Imp = Imp ;
LIST Incl = Incl ;
LIST Ind = Ind ;
LIST Inf = Inf ;
LIST Int = Int ;
LIST Loc = Loc ;
LIST Med = Med ;
LIST Neg = Neg ;
LIST Num = Num ;
LIST Obv =  Obv ;
LIST Pos = Pos ;
LIST Prf = Prf ;
LIST Pron = Pron ;
LIST Prox = Prox ;
LIST Prs = Prs ;
LIST Prt = Prt ;
LIST Qst = Qst ;
LIST Sbj = Sbj ;
LIST Prop = Prop ;

LIST Sg = Sg ;
LIST SgO = SgO ;
LIST P2lO = P2lO ;
LIST Pl = Pl ;
LIST PlO = PlO ;
LIST 12Pl = 12Pl ;
LIST 1Pl = 1Pl ;
LIST 1PlO = 1PlO ;
LIST 1Sg = 1Sg ;
LIST 1SgO = 1SgO ;
LIST 2Pl = 2Pl ;
LIST 2Sg = 2Sg ;
LIST 2SgO = 2SgO ;
LIST 3Pl = 3Pl ;
LIST 3PlO = 3PlO ;
LIST 3Sg = 3Sg ;
LIST 3SgO = 3SgO ;
LIST 4SgPlO = 4AgPlO ;
LIST 4Pl = 4Pl ;
LIST 4Sg/Pl = 4Sg/Pl ;
LIST 4PlO = 4PlO ;
LIST 4Sg = 4Sg ;
LIST 4SgO = 4SgO ;
LIST 4Sg/PlO = 4Sg/PlO ;
LIST 5Sg = 5Sg ;

LIST Px12Pl = Px12Pl ;
LIST Px1Pl = Px1Pl ;
LIST Px1Sg = Px1Sg ;
LIST Px2Pl = Px2Pl ;
LIST Px2Sg = Px2Sg ;
LIST Px3Pl = Px3Pl ;
LIST Px3Sg = Px3Sg ;
LIST Px4Pl = Px4Pl ;
LIST Px4Sg = Px4Sg ;
LIST CLB = CLB ;

LIST PUNCT = PUNCT ;
LIST LEFT = LEFT ;
LIST RIGHT = RIGHT ;
LIST Guess = Guess ;
LIST Der/Dim = Der/Dim ;


LIST COMMA = "," ;
LIST ¶ = ¶;

LIST DEPVERB = ("ê-.*"r) ;

# Syntactic tags
# --------------


LIST @ACT = @ACT ;
LIST @<ACT = @<ACT ;
LIST @ACT> = @ACT> ;
LIST @GOAL = @GOAL ;
LIST @<GOAL = @<GOAL ;
LIST @GOAL> = @GOAL> ;

LIST @INS = @INS ;
LIST @<INS = @<INS ;
LIST @INS> = @INS> ;


LIST @+FAUXV = @+FAUXV ;
LIST @+FMAINV = @+FMAINV ;
LIST @-FMAINV = @-FMAINV ;
LIST @-FAUXV = @-FAUXV ;

LIST @ADVL = @ADVL ;
LIST @ADVL> = @ADVL> ;
LIST @<ADVL = @<ADVL ;

 
LIST @>N = @>N ;
LIST @N< = @N< ;
 

LIST @P< = @P< ;
LIST @>P = @>P ;

LIST @HNOUN = @HNOUN ;
LIST @INTERJ = @INTERJ ;

 
LIST @>Num = @>Num;

LIST @Pron< = @Pron< ;
LIST @>Pron = @>Pron ;

LIST @Num< = @Num< ;

LIST @OBJ = @OBJ ;
LIST @<OBJ = @<OBJ ;
LIST @OBJ> = @OBJ> ;
LIST @OPRED = @OPRED ;
LIST @<OPRED = @<OPRED ;
LIST @OPRED> = @OPRED> ;
LIST @PCLE = @PCLE ;
 
LIST @SPRED = @SPRED ;
LIST @<SPRED = @<SPRED ;
LIST @SPRED> = @SPRED> ;
LIST @SUBJ = @SUBJ ;
LIST @<SUBJ = @<SUBJ ;
LIST @SUBJ> = @SUBJ> ;
LIST @<OBL = @<OBL ;
LIST @OBL> = @OBL> ;
 
LIST @APP = @APP ;
LIST @APP-N< = @APP-N< ;
LIST @APP-Pron< = @APP-Pron< ;
LIST @APP>Pron = @APP>Pron ;
LIST @APP-Num< = @APP-Num< ;
LIST @APP-ADVL< = @APP-ADVL< ;
LIST @VOC = @VOC ;

LIST @CVP = @CVP ;
LIST @CNP = @CNP ;
LIST @FS-VFIN< = @FS-VFIN< ;

LIST @? = @? ;
LIST @?? = @?? ;
LIST 3 = 3Sg 3Pl ;
LIST ABSN = (".*win"r) (".*wina"r) ;
LIST TEMPORALN = "kîsikâw" "askîwin" ;

 

# Initials
# --------

LIST INITIAL = "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m"
        "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z"
        "á" "æ" "ø" "å" "ö" "ä" ;

LIST CAP-INITIAL = "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M"
        "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z"
        "Á" "Æ" "Ø" "Å" "Ö" "Ä" ;

# Tag sets
# ========
  SETS
# ========


# Word or not
# -----------
LIST WORD = N V Ipc Interj Pron ;


# Verb sets
# ---------

LIST VFIN = (V 1Sg) (V 2Sg) (V 3Sg) (V 4Sg) (V 5Sg) (V 1Pl) (V 2Pl) (V 3Pl) (V 4Pl) (V 5Pl) (V 4Sg/Pl) (V 5Sg/Pl) ;

# Verbs and their complements
# - - - - - - - - - - - - - -

SET NOT-VERB = WORD - V ;
SET NOT-NOUN = WORD - N ;


# Here come the rules #


BEFORE-SECTIONS 


SECTION

MAP @<ADVL Loc OR Ipc  (-1 VFIN) ;
MAP @ADVL> Loc OR Ipc  (*1 VFIN) ;
MAP @ADVL Loc OR Ipc  ;
MAP @+FMAINV VFIN ;
MAP @>N (Pron Dem) (1 N)  ;
MAP @N< (Pron Dem) (-1 N)  ;


MAP:NAMES @>N TARGET Prop IF (0 Prop)(1 Prop);
## Residential School

#ACTor and goal rules for 3 and 3’ animate nouns
MAP:TAGOALObvR @<GOAL TARGET Obv IF (*-1 TA + 4Sg/PlO BARRIER V OR N) ;
MAP:TAGOALObvL @GOAL> TARGET Obv IF (*1 TA + 4Sg/PlO BARRIER V OR N) ;
MAP:TAGOAL3R @<GOAL TARGET N + AN IF (NOT 0 Obv LINK *-1 TA + 3PlO OR 3SgO BARRIER V OR N) ;
MAP:TAGOAL3L @GOAL> TARGET N + AN IF (NOT 0 Obv LINK *1 TA + 3PlO OR 3SgO BARRIER V OR CLB OR N) ;

MAP:TAACTorR @<ACT TARGET N + AN + Sg IF (NOT 0 Obv LINK *-1 TA + 3Sg BARRIER CLB) ;
MAP:TAACTorL @ACT> TARGET N + AN + Sg IF (NOT 0 Obv LINK *1 TA + 3Sg BARRIER CLB) ;
MAP:TAACTorR @<ACT TARGET N + AN + Pl IF (NOT 0 Obv LINK *-1 TA + 3Pl BARRIER CLB) ;
MAP:TAACTorL @ACT> TARGET N + AN + Pl IF (NOT 0 Obv LINK *1 TA + 3Pl BARRIER CLB) ;



MAP:TAACTObvR @<ACT TARGET Obv IF (*-1 TA + 4Sg/Pl BARRIER V) ;
MAP:TAACTObvL @ACT> TARGET Obv IF (*1 TA + 4Sg/Pl BARRIER V) ;


MAP:AITIACTorR @<ACT TARGET N + AN IF (*-1 (AI 3) OR (TI 3) BARRIER CLB) ;


##INTERROGATIVE
# MAP:INTR @<ACT TARGET Interr IF (*-1 AI OR TI + 3Pl OR 3Sg BARRIER CLB) ;
MAP:INTR @ACT> TARGET Interr IF (*1 AI OR TI + 3Pl OR 3Sg BARRIER CLB) ;

#TI and AI actors
MAP:AITIACTorR @<ACT TARGET N + AN IF (*-1 AI OR TI + 3Pl OR 3Sg BARRIER CLB) ;
MAP:AITIACTorL @ACT> TARGET N + AN IF (*1 AI OR TI + 3Pl OR 3Sg BARRIER CLB) ;

MAP:AITIACTorR @<ACT TARGET Obv IF (*-1 AI OR TI + 4Sg/Pl BARRIER CLB) ;
MAP:AITIACTorL @ACT> TARGET Obv IF (*1 AI OR TI + 4Sg/Pl BARRIER CLB) ;

#TI Goals
MAP:TIGOAL @<GOAL TARGET N + IN IF (*-1 TI BARRIER CLB) ;
MAP:TIGOAL @GOAL> TARGET N + IN IF (*1 TI BARRIER CLB) ;

#II actors
MAP:IIACTor3R @<ACT TARGET N + IN IF (*-1 II + 3Sg OR II + 3Pl BARRIER CLB) ;
MAP:IIACTor3L @ACT> TARGET N + IN IF (*1 II + 3Sg OR II + 3Pl BARRIER V) ;
MAP:IIACTor4R @ACT TARGET N + IN + Px3Sg OR Px3Pl IF (*-1 II + 4Sg OR II + 4Pl BARRIER CLB) ;
MAP:IIACTor4L @ACT TARGET N + IN + Px3Sg OR Px3Pl IF (*1 II + 4Sg OR II + 4Pl BARRIER CLB) ;


##TEMPORAL NOUNS
MAP:TEMPORALN @<ADVL TARGET TEMPORALN IF (*-1 AI OR TI OR TA BARRIER CLB) ;
MAP:TEMPORALN @ADVL> TARGET TEMPORALN IF (*1 AI OR TI OR TA BARRIER CLB) ;

##INSTRUMENTAL NOUNS
MAP:INSNOUN @<INS TARGET N IF (NOT 0 ABSN LINK *-1 AI OR TI OR TA BARRIER CLB) (NOT 0 Prop) (NOT 0 <@GOAL);
MAP:INSNOUN @INS> TARGET N IF (NOT 0 ABSN LINK *1 AI OR TI OR TA  BARRIER CLB) (NOT 0 Prop) (NOT 0 @GOAL>);

##OBLIQUES

MAP:OBL @<OBL TARGET N + IN IF (*-1 TA BARRIER N OR CLB) ; 
MAP:OBL @OBL> TARGET N + IN IF (*1 TA BARRIER N OR CLB) ; 






# MAP @FS-VFIN< DEPVERB (*-1 @+FMAINV OR (?)) ;
# MAP @OBJ> N IF (0 Sg + Obv)(*1 TA + 3SgO);
# MAP @<OBJ N IF (0 Sg + Obv)(*-1 TA + 3SgO);
# 
# MAP @SUBJ> N IF (0 AN + Sg)(*1 TA + 3Sg);
# MAP @<SUBJ N IF (0 AN + Sg)(*-1 TA + 3Sg);
# 
# MAP @SUBJ> N IF (0 AN + Sg)(*1 TA + 4Sg);
# MAP @<SUBJ N IF (0 AN + Sg)(*-1 TA + 4Sg);
# 
# MAP @SUBJ> N IF (0 IN + Sg)(*1 II + 3Sg);
# MAP @<SUBJ N IF (0 IN + Sg)(*-1 II + 3Sg);
# 
# MAP @SUBJ> N IF (0 IN + Pl)(*1 II + 3Pl);
# MAP @<SUBJ N IF (0 IN + Pl)(*-1 II + 3Pl);


MAP @? (?) ;

MAP @?? (*) (NOT 0 CLB) ;

AFTER-SECTIONS 

	#=====#
      END #
	#=====#