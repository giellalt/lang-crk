! Divvun & Giellatekno - open source grammars for Sámi and other languages
! Copyright © 2000-2010 The University of Tromsø
! http://giellatekno.uit.no & http://divvun.no
!
! This program is free software; you can redistribute and/or modify
! this file under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version. The GNU General Public License
! is found at http://www.gnu.org/licenses/gpl.html. It is
! also available in the file $GTHOME/LICENSE.txt.
!
! Other licensing options are available upon request, please contact
! giellatekno@hum.uit.no or divvun@samediggi.no

! ========================================================================== !
!!                           !!! Plains Cree verb stems                       
! ========================================================================== !



!! The verbs are analysed as follows:
!! * We split the Verb lexicon in 4 groups according to transitivity class
!! * For each group, we add the prefixes, and mark them with ''flag diacritics'' (the @ symbols)
!! * Then come the stems themselves
!! * Finally, and in another file, come the suffixes, including flag diacritics
!!   to ensure that the correct prefixes and suffixes are matched together


!! The Plains Cree verbs are divided in four groups:

!! # IA: Intransitive animate
!! # II: Intransitive inanimate
!! # TA: Transitive animate
!! # TI: Transitive inanimate

LEXICON Verbs !!= @CODE@ divides the verbs in these four transitivity classes

IA ; ! we try with both verb in one lexicon
!II ; ! intransitive inanimate
!TA ; ! transitive animate
!TI ; ! transitive inanimate


!! !! Intransitive animate
!     ====================

LEXICON IA   !!= @CODE@ divides IA in independent, conjunctive, imperative and future conditional
@U.mood.indep@ IA_INDEPENDENT ;		  !!= * @CODE@
@U.mood.cnj@ IA_CONJUNCTIV ;		  !!= * @CODE@ 
 IA_IMPERATIV ;		      !!= * @CODE@
 IA_FUTURE_CONDITIONAL ;  !!= * @CODE@


LEXICON IA_INDEPENDENT
< 0:n 0:i "@U.perspref.NI@"  0:"t2" > IA_IND_TENSE ; !
< 0:k 0:i "@U.perspref.KI@"  0:"t2" > IA_IND_TENSE ; !
<         "@U.perspref.NULL@"       > IA_IND_TENSE ; !


LEXICON IA_IND_TENSE
<                   "@U.tense.Prs@"     > IALIST ; !
< 0:k 0:î 0:%^EGLOT "@U.tense.Prt@"     > IALIST ; ! removed hyph
< 0:k 0:î 0:%-      "@U.tense.Prt@"     > IALIST ; !
< 0:k 0:a 0:%^EGLOT "@U.tense.FutDef@"  > IALIST ; !
< 0:k 0:a 0:%-      "@U.tense.FutDef@"  > IALIST ; !
< 0:w 0:î 0:%^EGLOT "@U.tense.FutInt@"  > IALIST ; !
< 0:w 0:î 0:%-      "@U.tense.FutInt@"  > IALIST ; !


LEXICON IA_FUTURE_CONDITIONAL
@U.mood.FutCon@ IALIST ;

LEXICON IA_CONJUNCTIV !!= @CODE@ gives flag for conjunctive (no prefix)
<  0:ê 0:%-       > IA_CNJ_TENSE ; !
<  0:ê 0:%^EGLOT   > IA_CNJ_TENSE ; !


LEXICON IA_CNJ_TENSE   !!= @CODE@ gives prefixes and flags for person-number in subjunctive
<        			"@U.tense.Prs@"    > IALIST ; !Present
< 0:k 0:î 0:%-  	"@U.tense.Prt@"    > IALIST ;  ! Preterite, 
< 0:k 0:î 0:%^EGLOT "@U.tense.Prt@"    > IALIST ;  ! Preterite,
< 0:w 0:î 0:%-  	"@U.tense.FutInt@" > IALIST ; ! Future Intentional
< 0:w 0:î 0:%^EGLOT "@U.tense.FutInt@" > IALIST ; ! Future Intentional


LEXICON IA_IMPERATIV   !!= @CODE@ gives prefixes and flags for person-number in imperative
@U.mood.imp@  IALIST ;


LEXICON IALIST  !!= @CODE@ just adds the prefix boundary
 :%> IASTEM ;


!!! !! Intransitive inanimate
!!     ====================
!
!LEXICON II 
!@U.mood.indep@ II_IND_TENSE ; ! Independent mode
!@U.mood.cnj@ II_CONJUNCTIV ; 
!@U.mood.FutCon@ IISTEM ;
!
!LEXICON II_CONJUNCTIV 
!<  0:ê 0:%-       > II_CNJ_TENSE ; !
!<  0:ê 0:%^EGLOT   > II_CNJ_TENSE ; !
!
!
!LEXICON II_CNJ_TENSE 
!<             		"@U.tense.Prs@" > IILIST ; !
!< 0:k 0:î 0:%^EGLOT "@U.tense.Prt@"     > IILIST ; !
!< 0:k 0:î 0:%-      "@U.tense.Prt@"     > IILIST ; !
!< 0:w 0:î 0:%^EGLOT "@U.tense.FutInt@"  > IILIST ; !
!< 0:w 0:î 0:%-      "@U.tense.FutInt@"  > IILIST ; !
!
!
!LEXICON II_IND_TENSE
!<                   "@U.tense.Prs@"     > IISTEM ; !
!< 0:k 0:î 0:%^EGLOT "@U.tense.Prt@"     > IISTEM ; !
!< 0:k 0:î 0:%-      "@U.tense.Prt@"     > IISTEM ; !
!< 0:w 0:î 0:%^EGLOT "@U.tense.FutInt@"  > IISTEM ; !
!< 0:w 0:î 0:%-      "@U.tense.FutInt@"  > IISTEM ; !
!
!LEXICON IILIST
! :%> IISTEM ;
!
!
!
!!! !! Transitive animate
!!     ==================
!
!LEXICON TA  
!@U.mood.indep@ TA_INDEPENDENT ;
!@U.mood.cnj@ TA_CONJUNCTIV ;
! TA_FUTURE_CONDITIONAL ;
! TA_IMPERATIV ;
!
!
!LEXICON TA_INDEPENDENT
!< 0:n 0:i "@U.perspref.NI@" 0:"t2" > TA_IND_TENSE ; !
!< 0:k 0:i "@U.perspref.KI@" 0:"t2" > TA_IND_TENSE ; !
!<         "@U.perspref.NULL@"      > TA_IND_TENSE ; !
!
!LEXICON TA_CONJUNCTIV
!< 0:ê 0:%-         > TA_CNJ_TENSE ; !
!< 0:ê 0:%^EGLOT    > TA_CNJ_TENSE ; !
!
!
!LEXICON TA_CNJ_TENSE 
!<             		"@U.tense.Prs@" > TALIST ; !
!< 0:k 0:î 0:%^EGLOT "@U.tense.Prt@"     > TALIST ; !
!< 0:k 0:î 0:%-      "@U.tense.Prt@"     > TALIST ; !
!< 0:w 0:î 0:%^EGLOT "@U.tense.FutInt@"  > TALIST ; !
!< 0:w 0:î 0:%-      "@U.tense.FutInt@"  > TALIST ; !
!
!
!LEXICON TA_IND_TENSE
!<                   "@U.tense.Prs@"     > TALIST ; !
!< 0:k 0:î 0:%^EGLOT "@U.tense.Prt@"     > TALIST ; !
!< 0:k 0:î 0:%-      "@U.tense.Prt@"     > TALIST ; !
!< 0:k 0:a 0:%^EGLOT "@U.tense.FutDef@"  > TALIST ; !
!< 0:k 0:a 0:%-      "@U.tense.FutDef@"  > TALIST ; !
!< 0:w 0:î 0:%^EGLOT "@U.tense.FutInt@"  > TALIST ; !
!< 0:w 0:î 0:%-      "@U.tense.FutInt@"  > TALIST ; !
!
!
!
!LEXICON TA_FUTURE_CONDITIONAL
!@U.mood.FutCon@ TALIST ;
!
!
!LEXICON TA_IMPERATIV   !!= @CODE@ gives flag for TA imperative
!@U.mood.imp@  TALIST ;   
!
!
!
!LEXICON TALIST  !!= @CODE@ just adds the prefix boundary
! :%> TASTEM ;
!

!! !! Transitive inanimate


!LEXICON TI  ! is still not written, and perhaps does not exist.
!# ;


!! !!! The stems
!     ==========


!! Words marked GG are from Plains Cree Grammar guide and glossary

! This and the next lexicon experiment with preverbs, Okimâsis p. 17.

!LEXICON IAPREVERB   
!IASLOT2 ; ! business as usual
!ati	    IASLOT2 "begin" ;
!nôhtê   IASLOT2 "want" ;
!kakwê   IASLOT2 "try" ;

!LEXICON IASLOT2
!IASTEM ; ! business as usual
!mâci    IASTEM "begin" ;
!nihtâ   IASTEM "have the ability to do well" ;
!pêyako  IASTEM "only" ;
!pôni    IASTEM "stop" ;
!nitawi  IASTEM "go and" ;
!pê	    IASTEM "toward speaker" ;
!mêcî    IASTEM "toward speaker" ;
!sâpo    IASTEM "through" ;
!yôski   IASTEM "soft" ;
!miyo    IASTEM "well" ;
!mâyi    IASTEM "bad" ;
!sôhki   IASTEM "hard" ;
!pisci   IASTEM "by mistake" ;
!kihci   IASTEM "large" ;


LEXICON IASTEM
nipâw:nipâ IACONJw "sleep" ; !!= @CODE@ GG
mâto IACONJ "cry" ; !!= @CODE@ GG
mîciso IACONJ "eat" ; !!= @CODE@ Variation in length of first vowel, here following Okimâsis. !GG
waniskâw IACONJ "rise, get up" ; !!= @CODE@ 
micisiw IACONJ "eat" ; !!= @CODE@
nohtehkatew IACONJ "be hungry" ; !!= @CODE@
atoskêw:atoskê IACONJw "work" ; !!= @CODE@ test
akwahow:akwaho IACONJw "to cover oneself" ; ! Source: Wolvengrey dictionary
nêhiyawêw:nêhiyawê IACONJw "work" ; !!= @CODE@
pimohte IACONJ "walk" ; !GG
ximohtâ IACONJ "testing " ; !GG
pîkiskwe IACONJ "speak" ; !GG
minihkwe IACONJ "drink" ; !GG
nikamo IACONJ "sing" ; !GG
masinahike IACONJ "write" ; !GG
ayamihcike IACONJ "read" ; !GG
kiskinohamâkosi IACONJ "learn" ;
itamahciho IACONJ "feel" ;
miyomahciho IACONJ "feel good" ;
nestosi IACONJ "be tired" ;
nohtekate IACONJ "be hungry" ;
nohtekwasi IACONJ "be sleepy" ;
pîhtwâ IACONJ "smoke" ; !GG
ohpî IACONJ "jump" ; !GG
api IACONJ "sit" ; !GG
nîpawi IACONJ "stand up" ; !GG
metawe IACONJ "play" ; !GG
pâhpi IACONJ "laught" ; !GG
nîmihito IACONJ "dance" ; !GG
kîwe IACONJ "go home" ; !GG
pihtokwe IACONJ "enter" ; !GG
nitohta TICONJ "listen" ;
nisitohta TICONJ "understand" ;

! colour terms

wâpiskisiw:wâpiskisi IACONJw "be white" ;
kaskitêsiw:kaskitêsi IACONJw "be black" ;
kaskitêwinâkosiw:kaskitêwinâkosi IACONJw "appear black" ;
mihkosiw:mihkosi  IACONJw "be red" ;
sîpihkosiw:sîpihkosi  IACONJw "be blue" ;
askihtakosiw:askihtakosi  IACONJw "be green" ;
wâposâwisiw:wâposâwisi  IACONJw "be yellow" ;
osâwisiw:osâwisi  IACONJw "be orange" ;
nîpâmâyâtisiw:nîpâmâyâtisi  IACONJw "be purple" ;
wâpinâkosiw:wâpinâkosi IACONJw "appear white" ;
itasinâsw:itansinâso IACONJw "what colour is" ;

!LEXICON IISTEM   !!= @CODE@  = VII
! Note: the final consonant here is dropped in the future conditional
! The best solution seems to be to add a twolc rule for that.
! There is such a rule, but outcommented (Stem Final n), it might be
! changed to affect only predesigned n-s (say, n2).
! I leave it for now, as it involves a look at the whole system.


wâsêskwan  IICONJ-SG "it is sunny" ;
mispon IICONJ-SG "it is snowing" ;
yôtin IICONJ-SG "it is windy" ;
sôhkiyowêw:sôhkiyowê IICONJw-SG "it is a strong wind" ;
sîkipêstâw:sîkipêstâ IICONJw-SG "it is pouring" ;
kaskaniwipêscâsin IICONJ-SG "it is misth" ;
miywâsin IICONJ "it is good" ; !yaml
mihkwâw:mihkwâ IICONJw "it is red" ; !yaml

!LEXICON TASTEM   !!= @CODE@ = VTA

wâpam TACONJ_1 "see" ;
wicih TACONJ_1 "help" ;
mow TACONJ_1 "eat X" ;
nôhkwâtew TACONJ_1 "lick" ; 

! JO VTA-1 verbs on a-
ahi TACONJ_1 "place X" ; ! note irregular !
âhkwatisim TACONJ_1 "freeze it" ;
akimik TACONJ_1 "count them" ;
âpacih TACONJ_1 "use it" ;
asam TACONJ_1 "feed X" ;
asên TACONJ_1 "refuse X" ;
asênamaw TACONJ_1 "return X to Y" ;
askowêh TACONJ_1 "follow X" ;
atoskah TACONJ_1 "hire X" ;
awih TACONJ_1 "loan X to Y" ;
ayâw TACONJ_1 "have X" ;
atoskaw:atosk	TACONJ_2 "work for him/her" ;
kapêsistaw:kapêsist TACONJ_2 ;

!LEXICON TISTEM  !VTI
!nisitohta TICONJ "understand" ;
!nitohta TICONJ "listen" ;


