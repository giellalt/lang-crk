! Divvun & Giellatekno - open source grammars for Sámi and other languages
! Copyright © 2000-2010 The University of Tromsø
! http://giellatekno.uit.no & http://divvun.no
!
! This program is free software; you can redistribute and/or modify
! this file under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version. The GNU General Public License
! is found at http://www.gnu.org/licenses/gpl.html. It is
! also available in the file $GTHOME/LICENSE.txt.
!
! Other licensing options are available upon request, please contact
! giellatekno@hum.uit.no or divvun@samediggi.no

! ========================================================================== !
!!                           !!! Plains Cree verb stems                       
! ========================================================================== !



!! The verbs are analysed as follows:
!! * We split the Verb lexicon in 4 groups according to transitivity class
!! * For each group, we add the prefixes, and mark them with ''flag diacritics'' (the @ symbols)
!! * Then come the stems themselves
!! * Finally, and in another file, come the suffixes, including flag diacritics
!!   to ensure that the correct prefixes and suffixes are matched together


!! The Plains Cree verbs are divided in four groups:

!! # IA: Intransitive animate
!! # II: Intransitive inanimate
!! # TA: Transitive animate
!! # TI: Transitive inanimate

LEXICON Verbs !!= @CODE@ divides the verbs in four transitivity classes

IA ; ! intransitive animate
II ; ! intransitive inanimate
TA ; ! transitive animate
!TI ; ! transitive inanimate


!! !! Intransitive animate
!     ====================

LEXICON IA   !!= @CODE@ divides in independent, subjunctive and imperative

          IA_INDEPENDENT ;
:ê-       IA_SUBJUNCTIV ;
:ê%^EGLOT IA_SUBJUNCTIV ;
          IA_IMPERATIV ;
          IA_FUTURE_CONDITIONAL ;

LEXICON IA_INDEPENDENT   !!= @CODE@ gives prefixes and flags for person-number in indicative

!Present tense

< 0:n 0:i "@U.verb.ind1sg@"  0:"t2" > IALIST ; !"
< 0:k 0:i "@U.verb.ind2sg@"  0:"t2" > IALIST ; !"
<         "@U.verb.ind3sg@"         > IALIST ; !"
<         "@U.verb.ind3osg@"        > IALIST ; !"
< 0:n 0:i "@U.verb.ind1pl@"  0:"t2" > IALIST ;   ! exclusive Pl
< 0:k 0:i "@U.verb.ind12pl@" 0:"t2" > IALIST ;   ! inclusive Pl
< 0:k 0:i "@U.verb.ind2pl@"  0:"t2" > IALIST ;   !"
<         "@U.verb.ind3pl@"         > IALIST ; !"
<         "@U.verb.ind3opl@"        > IALIST ; !"

!Past/Preterite tense

< 0:n 0:i 0:k 0:î 0:%- "@U.verb.indprt1sg@"  > IALIST ; !"
< 0:k 0:i 0:k 0:î 0:%- "@U.verb.indprt2sg@"  > IALIST ; !"
<         0:k 0:î 0:%- "@U.verb.indprt3sg@"  > IALIST ; !"
<         0:k 0:î 0:%- "@U.verb.indprt3osg@" > IALIST ; !"
< 0:n 0:i 0:k 0:î 0:%- "@U.verb.indprt1pl@"  > IALIST ;   ! exclusive Pl
< 0:k 0:i 0:k 0:î 0:%- "@U.verb.indprt12pl@" > IALIST ;   ! inclusive Pl
< 0:k 0:i 0:k 0:î 0:%- "@U.verb.indprt2pl@"  > IALIST ;   !"
<         0:k 0:î 0:%- "@U.verb.indprt3pl@"  > IALIST ; !"
<         0:k 0:î 0:%- "@U.verb.indprt3opl@" > IALIST ; !"

!Future definite tense

< 0:n 0:i 0:k 0:a 0:%- "@U.verb.indFutDef1sg@"   > IALIST ; !"Okimâsis 2004: 33 and 39
< 0:k 0:i 0:k 0:a 0:%- "@U.verb.indFutDef2sg@"   > IALIST ; !"
<         0:k 0:a 0:%- "@U.verb.indFutDef3sg@"   >  IALIST ; !"
<         0:k 0:a 0:%- "@U.verb.indFutDef3osg@"  > IALIST ; !"
< 0:n 0:i 0:k 0:a 0:%-  "@U.verb.indFutDef1pl@"  > IALIST ;   ! exclusive Pl
< 0:k 0:i 0:k 0:a 0:%-  "@U.verb.indFutDef12pl@" > IALIST ;   ! inclusive Pl
< 0:k 0:i 0:k 0:a 0:%-  "@U.verb.indFutDef2pl@"  > IALIST ;   !"
<         0:k 0:a 0:%-  "@U.verb.indFutDef3pl@"  > IALIST ; !"
<         0:k 0:a 0:%-  "@U.verb.indFutDef3opl@" > IALIST ; !"

!Future intentional tense

< 0:n 0:i 0:w 0:î 0:%- "@U.verb.indFutInt1sg@"  > IALIST ; !"Okimâsis 2004: 33 and 39
< 0:k 0:i 0:w 0:î 0:%- "@U.verb.indFutInt2sg@"  > IALIST ; !"
<         0:w 0:î 0:%- "@U.verb.indFutInt3sg@"  > IALIST ; !"
<         0:w 0:î 0:%- "@U.verb.indFutInt3osg@" > IALIST ; !"
< 0:n 0:i 0:w 0:î 0:%- "@U.verb.indFutInt1pl@"  > IALIST ; ! exclusive Pl
< 0:k 0:i 0:w 0:î 0:%- "@U.verb.indFutInt12pl@" > IALIST ; ! inclusive Pl
< 0:k 0:i 0:w 0:î 0:%- "@U.verb.indFutInt2pl@"  > IALIST ; !"
<         0:w 0:î 0:%- "@U.verb.indFutInt3pl@"  > IALIST ; !"
<         0:w 0:î 0:%- "@U.verb.indFutInt3opl@" > IALIST ; !"


LEXICON IA_FUTURE_CONDITIONAL
< "@U.verb.FutCon@" > IALIST ;

!@U.verb.FutCon1sg@ IALIST ;
!@U.verb.FutCon2sg@ IALIST ;
!@U.verb.FutCon3sg@ IALIST ;
!@U.verb.FutCon3osg@ IALIST ;
!@U.verb.FutCon1pl@ IALIST ;
!@U.verb.FutCon12pl@ IALIST ;
!@U.verb.FutCon2pl@ IALIST ;
!@U.verb.FutCon3pl@ IALIST ;
!@U.verb.FutCon3opl@ IALIST ;

LEXICON IALIST
 :%> IAPREVERB ;



LEXICON IA_SUBJUNCTIV   !!= @CODE@ gives prefixes and flags for person-number in subjunctive
!Present
< "@U.verb.sbjPrs@" > IAPREVERB ;

! Preterite
< 0:k 0:î 0:%- "@U.verb.sbjPrt@" > IAPREVERB ;  ! Is this correct? TT

! Future Intentional
< 0:w 0:î 0:%- "@U.verb.sbjFutureInt@" > IAPREVERB ;

!@U.verb.sbj1sg@ IAPREVERB ;
!@U.verb.sbj2sg@ IAPREVERB ;
!@U.verb.sbj3sg@ IAPREVERB ;
!@U.verb.sbj3osg@ IAPREVERB ;

!@U.verb.sbj1pl@  IAPREVERB ;   ! exclusive Pl
!@U.verb.sbj12pl@  IAPREVERB ; ! inclusive Pl
!@U.verb.sbj2pl@  IAPREVERB ;   
!@U.verb.sbj3pl@ IAPREVERB ;
!@U.verb.sbj3opl@ IAPREVERB ;


LEXICON IA_IMPERATIV   !!= @CODE@ gives prefixes and flags for person-number in imperative
@U.verb.imp2sg@  IAPREVERB ;
@U.verb.imp2pl@  IAPREVERB ;   
@U.verb.imp12pl@  IAPREVERB ;   ! inclusive Pl

!! !! Intransitive inanimate
!     ====================



LEXICON II 
<                "@U.verb.NULL@"   > IISTEM ; ! Independent mode
<  0:ê 0:%-      "@U.verb.sbjPrs@" > IISTEM ; !"
<  0:ê 0:%^EGLOT "@U.verb.sbjPrs@" > IISTEM ;


!! !! Transitive animate
!     ==================

LEXICON TA  !!= @CODE@ is still not written

          TA_INDEPENDENT ;
:ê-       TA_SUBJUNCTIV ;
:ê%^EGLOT TA_SUBJUNCTIV ;
          TA_FUTURE ;
          TA_IMPERATIV ;

LEXICON TA_INDEPENDENT

< 0:n 0:i "@U.verb.NI@"   > TASTEM ; !"
< 0:k 0:i "@U.verb.KI@"   > TASTEM ; !"
<         "@U.verb.NULL@" > TASTEM ; !"

LEXICON TA_SUBJUNCTIV 
@U.verb.sbj@ TASTEM ;

LEXICON TA_FUTURE 
@U.verb.fut@ TASTEM ;


LEXICON TA_IMPERATIV   !!= @CODE@ gives prefixes and flags for person-number in imperative

@U.verb.NULL@  TASTEM ;
@U.verb.NULL@  TASTEM ;   ! exclusive Pl
@U.verb.NULL@  TASTEM ;   
               TA_FUTURE ;


!! !! Transitive inanimate


!LEXICON TI  != @CODE@ is still not written, and perhaps does not exist.
!# ;


!! !!! The stems
!     ==========


!! Words marked GG are from Plains Cree Grammar guide and glossaryd

! This and the next lexicon experiment with preverbs, Okimâsis p. 17.

LEXICON IAPREVERB   !!= @CODE@ = VAI
IASLOT2 ; ! business as usual
ati	    IASLOT2 "begin" ;
nôhtê   IASLOT2 "want" ;
kakwê   IASLOT2 "try" ;

LEXICON IASLOT2
IASTEM ; ! business as usual
mâci    IASTEM "begin" ;
nihtâ   IASTEM "have the ability to do well" ;
pêyako  IASTEM "only" ;
pôni    IASTEM "stop" ;
nitawi  IASTEM "go and" ;
pê	    IASTEM "toward speaker" ;
mêcî    IASTEM "toward speaker" ;
sâpo    IASTEM "through" ;
yôski   IASTEM "soft" ;
miyo    IASTEM "well" ;
mâyi    IASTEM "bad" ;
sôhki   IASTEM "hard" ;
pisci   IASTEM "by mistake" ;
kihci   IASTEM "large" ;


LEXICON IASTEM
nipâw:nipâ IACONJ "sleep" ; !!= @CODE@ GG
mâto IACONJ "cry" ; !!= @CODE@ GG
mîciso IACONJ "eat" ; !!= @CODE@ Variation in length of first vowel, here following Okimâsis. !GG
waniskâw IACONJ "rise, get up" ; !!= @CODE@ 
micisiw IACONJ "eat" ; !!= @CODE@
nohtehkatew IACONJ "be hungry" ; !!= @CODE@
atoskêw:atoskê IACONJ "work" ; !!= @CODE@ test
akwahow:akwaho IACONJ "to cover oneself" ; ! Source: Wolvengrey dictionary
nêhiyawêw:nêhiyawê IACONJ "work" ; !!= @CODE@
pimohte IACONJ "walk" ; !GG
ximohtâ IACONJ "testing " ; !GG
pîkiskwe IACONJ "speak" ; !GG
minihkwe IACONJ "drink" ; !GG
nikamo IACONJ "sing" ; !GG
masinahike IACONJ "write" ; !GG
ayamihcike IACONJ "read" ; !GG
kiskinohamâkosi IACONJ "learn" ;
itamahciho IACONJ "feel" ;
miyomahciho IACONJ "feel good" ;
nestosi IACONJ "be tired" ;
nohtekate IACONJ "be hungry" ;
nohtekwasi IACONJ "be sleepy" ;
pîhtwâ IACONJ "smoke" ; !GG
ohpî IACONJ "jump" ; !GG
api IACONJ "sit" ; !GG
nîpawi IACONJ "stand up" ; !GG
metawe IACONJ "play" ; !GG
pâhpi IACONJ "laught" ; !GG
nîmihito IACONJ "dance" ; !GG
kîwe IACONJ "go home" ; !GG



! colour terms

wâpiskisiw:wâpiskisi IACONJ "be white" ;
kaskitêsiw:kaskitêsi IACONJ "be black" ;
kaskitêwinâkosiw:kaskitêwinâkosi IACONJ "appear black" ;
mihkosiw:mihkosi  IACONJ "be red" ;
sîpihkosiw:sîpihkosi  IACONJ "be blue" ;
askitahkosiw:askitahkosi  IACONJ "be green" ;
wâposâwisiw:wâposâwisi  IACONJ "be yellow" ;
osâwisiw:osâwisi  IACONJ "be orange" ;
nîpâmâyâtisiw:nîpâmâyâtisi  IACONJ "be purple" ;
wâpinâkosiw:wâpinâkosi IACONJ "appear white" ;

itasinâsw:itansinâso IACONJ "what colour is" ;

LEXICON IISTEM   !!= @CODE@  = VII
! Note: the final consonant here is dropped in the future conditional
! The best solution seems to be to add a twolc rule for that.
! There is such a rule, but outcommented (Stem Final n), it might be
! changed to affect only predesigned n-s (say, n2).
! I leave it for now, as it involves a look at the whole system.
wâsêskwan  IICONJ "it is sunny" ;
mispon IICONJ "it is snowing" ;
yôtin IICONJ "it is windy" ;
sôhkiyowêw IICONJ "it is a strong wind" ;
sîkipêstâw IICONJ "it is pouring" ;
kaskaniwipêscâsin IICONJ "it is misth" ;

LEXICON TASTEM   !!= @CODE@ = VTA

wâpam TACONJ_1 "see" ;
wicih TACONJ_1 "help" ;
mow TACONJ_1 "eat X" ;
nôhkwâtew TACONJ_1 "lick" ; 

! JO VTA-1 verbs on a-
ahi TACONJ_1 "place X" ; ! note irregular !
âhkwatisim TACONJ_1 "freeze it" ;
akimik TACONJ_1 "count them" ;
âpacih TACONJ_1 "use it" ;
asam TACONJ_1 "feed X" ;
asên TACONJ_1 "refuse X" ;
asênamaw TACONJ_1 "return X to Y" ;
askowêh TACONJ_1 "follow X" ;
atoskah TACONJ_1 "hire X" ;
awih TACONJ_1 "loan X to Y" ;
ayâw TACONJ_1 "have X" ;
atoskaw:atosk	TACONJ_2 "work for him/her" ;
kapêsistaw:kapêsist TACONJ_2 ;

!LEXICON TISTEM  !VTI
!nisitohta  "understand" ;
!nitohta "listen" ;


