! Divvun & Giellatekno - open source grammars for Sámi and other languages
! Copyright © 2000-2010 The University of Tromsø
! http://giellatekno.uit.no & http://divvun.no
!
! This program is free software; you can redistribute and/or modify
! this file under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version. The GNU General Public License
! is found at http://www.gnu.org/licenses/gpl.html. It is
! also available in the file $GTHOME/LICENSE.txt.
!
! Other licensing options are available upon request, please contact
! giellatekno@hum.uit.no or divvun@samediggi.no

! ========================================================================== !
!!                           !!! Plains Cree verb morphology                           
! ========================================================================== !


!! __Note__ ''This file is copied from Ojibwe, and is thus only an illustration.''

!! The Plains Cree verbs are divided in four groups:

!! # IA: Intransitive animate
!! # II: Intransitive inanimate
!! # TA: Transitive animate
!! # TI: Transitive inanimate


!! !!! Intransitive animate (IA)

LEXICON IACONJ !!= @CODE@ splits in 3 conjugations
+V+IA+Ind: IA_IND ;
+V+IA: IA_SBJ ;
+V+IA: IA_IMP ;

LEXICON IA_IND !!= @CODE@ gives positive and negative
IA_IND_SUFF ;

! If no negative suffix, then the following 3 lines are not needed
!             IA_IND_SUFF ;
! +Neg:%>siin IA_IND_SUFF ; ! Ojibwe
! LEXICON IA_IND_SUFF !!= @CODE@ (so far) gives present tense only

+Prs: IA_IND_PRS ;
+Prt: IA_IND_PRT ;

LEXICON IA_IND_PRS !!= @CODE@ gives person suffixes
< "+1Sg":0 "@U.verb.ind1sg@" 0:n > # ; !"
< "+2Sg":0 "@U.verb.ind2sg@" 0:n > # ; !"
< "+3Sg":0 "@U.verb.ind3sg@" 0:w > # ; !"
< "+3oSg":0 "@U.verb.ind3osg@"  0:y 0:i 0:w 0:a > # ; !"
< "+1Pl":0 "@U.verb.ind1pl@" 0:n 0:â 0:n > # ;   ! exclusive Pl
< "+12Pl":0 "@U.verb.ind12pl@" 0:n 0:a 0:w > # ; ! inclusive Pl
< "+2Pl":0 "@U.verb.ind2pl@" 0:n 0:â 0:w 0:â 0:w > # ;           !
< "+3Pl":0 "@U.verb.ind3pl@" 0:w 0:a 0:k  > # ;   !
< "+3oPl":0 "@U.verb.ind3opl@" 0:y 0:i 0:w 0:a  > # ;   !


LEXICON IA_IND_PRT ! Dummy lexicon
# ;

LEXICON IA_IND_SUFF ! Dummy lexicon
# ;

LEXICON IA_SBJ !!= @CODE@ gives flag diacritics and directs to subjunctive person suffixes
@U.verb.sbj1sg@  1sgsubjunctive ;
@U.verb.sbj2sg@  2sgsubjunctive ;
@U.verb.sbj3sg@  3sgsubjunctive ;
@U.verb.sbj3osg@ 3osgsubjunctive ;
@U.verb.sbj1pl@  1plsubjunctive ;
@U.verb.sbj12pl@ 12plsubjunctive ;
@U.verb.sbj2pl@  2plsubjunctive ;
@U.verb.sbj3pl@  3plsubjunctive ;
@U.verb.sbj3opl@  3oplsubjunctive ;

LEXICON 1sgsubjunctive
    +Sbj+1Sg:%>yân #;
!+Neg+Sbj+1Sg:%>siwaan  # ;

LEXICON 2sgsubjunctive
    +Sbj+2Sg:%>yan	#;
!+Neg+Sbj+2Sg:%>siwan   # ;

LEXICON 3sgsubjunctive
    +Sbj+3Sg:%>t	#;
!+Neg+Sbj+3Sg:%>sig	   # ;

LEXICON 3osgsubjunctive
    +Sbj+3oSg:%>yit #;
!+Neg+Sbj+3oSg:%>sinid  # ;
!+Neg+Sbj+3oSg:%>sinig  # ;

LEXICON 1plsubjunctive 
    +Sbj+1Pl:%>yâhk #;
+Neg+Sbj+1Pl:%>siwaang # ;

LEXICON 12plsubjunctive
    +Sbj+12Pl:%>yahk #;
+Neg+Sbj+12Pl:%>siwang # ;

LEXICON 2plsubjunctive 
    +Sbj+2Pl:%>nyêk #;
!+Neg+Sbj+2Pl:%>siweg   # ;

LEXICON 3plsubjunctive 
    +Sbj+3Pl:%>cik #;
!+Neg+Sbj+3Pl:%>siwaa   # ;

LEXICON 3oplsubjunctive 
    +Sbj+3oPl:%>yit #;
!+Neg+Sbj+3Pl:%>siwaa   # ;



LEXICON IA_IMP  !!= @CODE@ gives flag diacritics and directs to imperative person suffixes
@U.verb.imp2sg@  2sgimp ;
@U.verb.imp1pl@  1plimp ;
@U.verb.imp2pl@  2plimp ;

LEXICON 2sgimp
+Imp+Imm+2Sg:%>n   # ;
+Imp+Int+2Sg:%>ken # ;
+Imp+Dur+2Sg:%>kan # ;

LEXICON 1plimp
+Imp+Imm+1Pl:%>ndâ	  # ;
+Imp+Int+1Pl:%>siidâ # ;

LEXICON 2plimp
+Imp+Imm+2Pl:%>k	 # ;
+Imp+Imm+2Pl:%>g	 # ;
+Imp+Int+2Pl:%>kegon # ;
+Imp+Dur+2Pl:%>keg	 # ;



!! !! Intransitive inanimate (II)


LEXICON IICONJ  !!= @CODE@ splits according to conjugation
+V+II+Ind+Prs: II_IND_PRS ;
+V+II+Neg+Ind+Prs: II_NEG_IND_PRS ;
+V+II+Sbj: II_SBJ ;
+V+II+Neg+Sbj: II_NEG_SBJ ;

LEXICON II_IND_PRS   !!= @CODE@ is positive present
+3Sg: # ;
+3oSg:%>yiw # ;
+3Pl:%>a # ;
+3oPl:%>yiwa # ;

LEXICON II_NEG_IND_PRS  !!= @CODE@ is negative present
+3Sg:%>siinoon # ;
+3oSg:%>sinini # ;
+3Pl:%>siinoon # ;
+3oPl:%>sininiwan # ;

LEXICON II_SBJ   !!= @CODE@ is positive subjunctive
+3Sg:%>g # ;
+3oSg:%>nig # ;
+3Pl:%>g # ;
+3oPl:%>nig # ;

LEXICON II_NEG_SBJ   !!= @CODE@ is negative subjunctive
+3Sg:%>sinog # ;
+3oSg:%>sininig # ;
+3Pl:%>sinog # ;
+3oPl:%>sininig # ;


!! !! Transitive animate (TA)

LEXICON TACONJ !!= @CODE@ splits in 3 conjugations
+V+TA+Ind: TA_IND ;
+V+TA+Sbj: TA_SBJ ;
+V+TA+Fut: TA_FUT ;
+V+TA+Imp: TA_IMP ;

LEXICON TA_IND !!= @CODE@ gives prs
+Prs: TA_IND_PRS ;

LEXICON TA_IND_PRS !!= @CODE@ gives tags for subject, flag for object, and directs to obj suffs
@U.verb.ind1sg@   1Sg_O ;  !
@U.verb.ind2sg@   2Sg_O ;  !
@U.verb.ind3sg@   3Sg_O ;  !
@U.verb.ind3osg@  3oSg_O ; !
@U.verb.ind1pl@   1Pl_O ;  ! exclusive Pl
@U.verb.ind12pl@  12Pl_O ; ! inclusive Pl
@U.verb.ind2pl@   2Pl_O ;  !
@U.verb.ind3pl@   3Pl_O ;  !
@U.verb.ind3opl@  3oPl_O ; !


LEXICON 1Sg_O  !!= @CODE@ gives the objects suffixes matching 1Sg subject or 1Sg object
+1Sg+3SgO:%>âw		  # ;
+1Sg+3PlO:%>âwak	  # ;
+3Sg+1SgO:%>ik        # ;
+3Sg+1PlO:%>ik        # ;
+3Sg+1PlO:%>ikonân	  # ;
+3Pl+1SgO:%>ikwak	  # ;

LEXICON 2Sg_O 	    !!= @CODE@ gives the objects suffixes matching 2Sg subject
+2Sg+3SgO:%>âw		  # ;
+2Sg+3PlO:%>âwak	  # ;
+3Sg+2SgO:%>ik		  # ;
+3Pl+2SgO:%>ikwak	  # ;
				  
LEXICON 3Sg_O 	  
+3Sg+3SgO:%>êw		  # ;
+3Sg+3SgO:%>ik		  # ;
+3Sg+3SgO:%>kow	  # ;
+3Sg+3PlO:%>êw		  # ;
+3Sg+3PlO:%>ikowak	  # ;
+3Sg+3PlO:%>ikak	  # ;

+3Pl+3SgO:%>kow	  # ;
+3Pl+3SgO:%>êwak	  # ;
				  
LEXICON 3oSg_O 	  
+3oSg+3SgO:%>êyiwa	  # ;
+3oSg+3PlO:%>êyiwa	  # ;
+3oSg+3SgO:%>ikoyiwa  # ;
+3oSg+3PlO:%>ikoyiwa  # ;
+3oSg+3oPlO:%>ikoyiwa  # ;

LEXICON 1Pl_O 	  
+1Pl+3SgO:%>ânân	  # ;
+1Pl+3PlO:%>ânânak	  # ;
+3Pl+1PlO:%>ikonânak  # ;
				  
LEXICON 12Pl_O 	  
+12Pl+3SgO:%>ânaw	  # ;
+12Pl+3PlO:%>ânawak	  # ;
+3Sg+12PlO:%>ikonaw	  # ;
+3Sg+2PlO:%>ikowâw	  # ;
+3Pl+12PlO:%>ikonawak # ;
				  
LEXICON 2Pl_O 	  
+2Pl+3SgO:%>âwâw	  # ;
+2Pl+3PlO:%>âwâwak	  # ;
+3Pl+2PlO:%>ikowâwak  # ;
				  
LEXICON 3Pl_O 	  
+3Pl+3PlO:%>ikowak	  # ;
+3Pl+3PlO:%>êwak	  # ;
				  
LEXICON 3oPl_O 	  
+3oPl+3SgO:%>êyiwa	  # ;
+3oPl+3PlO:%>êyiwa	  # ;



!LEXICON TA_IND_PRT ! Dummy lexicon
!# ;


LEXICON TA_SBJ !!= @CODE@ gives flag diacritic and directs to subjunctive person suffixes
@U.verb.sbj@ TA_SBJ_SUF ;

LEXICON TA_SBJ_SUF !!= @CODE@ gives subj + obj tag and suf

+1Sg+3SgO:%>ak		   # ;
+1Sg+3PlO:%>akik	   # ;

+1Pl+3SgO:%>âyâhk	   # ;
+1Pl+3PlO:%>âyâhkik	   # ;

+12Pl+3SgO:%>âyâhk	   # ;
+12Pl+3PlO:%>âyâhkok   # ;

+2Sg+3SgO:%>at		   # ;
+2Sg+3PlO:%>acik	   # ;
+2Pl+3SgO:%>âyêk	   # ;
+2Pl+3PlO:%>âyêkok	   # ;

+3Sg+3oPlO:%>ikocik	   # ;
+3Sg+3SgO:%>ât		   # ;
+3Sg+3PlO:%>ât		   # ;
+3Sg+2SgO:%>isk		   # ;
+3Sg+2PlO:%>ikoyêk	   # ;
+3Sg+1SgO:%>it		   # ;
+3Sg+1PlO:%>ikoyâhk	   # ;
+3Sg+12PlO:%>ikoyahk   # ;

+3Pl+3oPlO:%>ikocik	   # ;
+3Pl+3SgO:%>âcik	   # ;
+3Pl+3PlO:%>âcik	   # ;
+3Pl+2SgO:%>iskik	   # ;
+3Pl+2PlO:%>ikoyêkok   # ;
+3Pl+1SgO:%>icik	   # ;
+3Pl+1PlO:%>ikoyâhkik  # ;
+3Pl+12PlO:%>ikoyâhkok # ;

+3oSg+3oSgO:%>koyit	   # ;
+3oSg+3oPlO:%>ikoyit   # ;
+3oSg+3SgO:%>kot	   # ;
+3oSg+3SgO:%>ikot	   # ;
+3oSg+3PlO:%>ikocik	   # ;

+3oPl+3oSgO:%>koyit	   # ;
+3oPl+3oPlO:%>ikoyit   # ;
+3oPl+3SgO:%>kot	   # ;
+3oPl+3SgO:%>ikot	   # ;
+3oPl+3PlO:%>ikocik	   # ;


LEXICON TA_FUT !!= @CODE@ gives flag diacritic and directs to subjunctive person suffixes
@U.verb.fut@ TA_FUT_SUF ;


LEXICON TA_FUT_SUF

+1Sg+3SgO:%>aki		   # ;
+1Sg+3PlO:%>akwâwi	   # ;
+1Pl+3SgO:%>âyâhki	   # ;
+1Pl+3PlO:%>âyâhkwâwi  # ;
+12Pl+3SgO:%>âyâhko	   # ;
+12Pl+3PlO:%>âyâhkwâwi # ;

+2Sg+3SgO:%>aci		   # ;
+2Sg+3PlO:%>atwâwi	   # ;
+2Pl+3SgO:%>âyêko	   # ;
+2Pl+3PlO:%>âyêkwâwi   # ;
					   
+3Sg+3oSgO:%>âyici	   # ;
+3Sg+3SgO:%>âci		   # ;
+3Sg+3PlO:%>ikotwâwi   # ;
+3Sg+2SgO:%>iski	   # ;
+3Sg+2PlO:%>ikoyêko	   # ;
+3Sg+1SgO:%>ici		   # ;
+3Sg+1PlO:%>ikoyâhki   # ;
+3Sg+12PlO:%>ikoyahko  # ;
					   
+3Pl+3SgO:%>âtwâwi	   # ;
+3Pl+3PlO:%>âtwâwi	   # ;
+3Pl+3PlO:%>ikotwâwi   # ;
					   
+3oSg+3oPlO:%>ikoyici  # ;
+3oSg+3SgO:%>ikoci	   # ;
+3oSg+3PlO:%>âyici	   # ;
+3oPl+3oPlO:%>ikoyici  # ;
+3oPl+3SgO:%>ikoci	   # ;
+3oPl+3PlO:%>âyici	   # ;


LEXICON TA_IMP
@U.verb.imp2sg@  2Sg_Imp ;
@U.verb.imp1pl@  2Pl_Imp ;
@U.verb.imp2pl@ 12Pl_Imp ;

LEXICON 2Sg_Imp
    +2Sg+3SgO: # ;
    +2Sg+3PlO:%>ik # ;
+Del+2Sg+3SgO:%>âhkan # ;
+Del+2Sg+3PlO:%>âhkanik # ;

LEXICON 2Pl_Imp
    +2Pl+3SgO:%>ihk # ;
    +2Pl+3PlO:%>ihkok # ;
+Del+2Pl+3SgO:%>âhkêk # ;
+Del+2Pl+3PlO:%>âhkêkok # ;

LEXICON 12Pl_Imp
    +12Pl+3SgO:%>âtân # ;
    +12Pl+3PlO:%>âtânik # ;
+Del+12Pl+3SgO:%>âhkahk # ;
+Del+12Pl+3PlO:%>âhkahkok # ;








LEXICON TACONJ_aw  !!= * @CODE@ not yet written
 # ;

!! !! Transitive Inanimate (TI)

LEXICON TICONJ  !!= * @CODE@ not yet written
+V+TI+Ind: TI_IND ;


LEXICON TI_IND
 TI_IND_SUFF ;
 
 
LEXICON TI_IND_SUFF
+1Sg@U.verb.1sgindep@:n@U.verb.1sgindep@ # ;
+2Sg@U.verb.2sgindep@:n@U.verb.2sgindep@ # ;
+3Sg@U.verb.3sgindep@:m@U.verb.3sgindep@ # ;
+3oSg000@U.verb.3osgindep@:miyiwa@U.verb.3osgindep@ # ;
!+3iSg@U.verb.3isgindep@:m@U.verb.3isgindep@ # ;
+1Pl@U.verb.1plindep@:nân@U.verb.1plindep@ # ;   ! exclusive Pl
+12Pl@U.verb.12plindep@:naw@U.verb.12plindep@ # ; ! inclusive Pl
+2Pl@U.verb.2plindep@:nâwâw@U.verb.2plindep@ # ;
+3Pl@U.verb.3plindep@:wak@U.verb.3plindep@ # ;



