! Divvun & Giellatekno - open source grammars for Sámi and other languages
! Copyright © 2000-2010 The University of Tromsø
! http://giellatekno.uit.no & http://divvun.no
!
! This program is free software; you can redistribute and/or modify
! this file under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version. The GNU General Public License
! is found at http://www.gnu.org/licenses/gpl.html. It is
! also available in the file $GTHOME/LICENSE.txt.
!
! Other licensing options are available upon request, please contact
! giellatekno@hum.uit.no or divvun@samediggi.no

! ========================================================================== !
!!                           !!! Plains Cree verb morphology                  
! ========================================================================== !


!! The Plains Cree verbs are divided in four groups:

!! # IA: Intransitive animate
!! # II: Intransitive inanimate
!! # TA: Transitive animate
!! # TI: Transitive inanimate


!! !!! Intransitive animate (IA)

LEXICON IACONJ !!= @CODE@ splits in 4 moods
+V+IA:      # ; !Baseform
+V+IA+Ind:      IA_IND ;
+V+IA+Cnj:      IA_SBJ ; 
+V+IA:%>        IA_IMP ;
+V+IA+Fut+Cond: IA_FUT_CON ;

LEXICON IA_IND !!= @CODE@ First mode, indicative
< "@U.tm.Prs@"    "+Prs":%>          > IA_IND_PRS ;
< "@U.tm.Prt@"    "+Prt":%>          > IA_IND_PRS ; !test
< "@U.tm.FutDef@" "+Fut":0 "+Def":%> > IA_IND_PRS ; !Future definite - Ind Fut?
< "@U.tm.FutInt@" "+Fut":0 "+Int":%> > IA_IND_PRS ; !Future intentional


LEXICON IA_IND_PRS !!= @CODE@ gives person suffixes
< 0:"^EA"  "+1Sg":0 "@U.verb.NI@"   0:n                 > # ; !"
< 0:"^EA"  "+2Sg":0 "@U.verb.KI@"   0:n                 > # ; !"
<          "+3Sg":0 "@U.verb.NULL@" 0:w                 > # ; !"
<         "+4Sg":0 "@U.verb.NULL@" 0:y 0:i 0:w 0:a     > # ; !"
< 0:"^EA"  "+1Pl":0 "@U.verb.NI@"   0:n 0:â 0:n         > # ;   ! exclusive Pl
< 0:"^EA" "+12Pl":0 "@U.verb.KI@"   0:n 0:a 0:w         > # ; ! inclusive Pl
< 0:"^EA"  "+2Pl":0 "@U.verb.KI@"   0:n 0:â 0:w 0:â 0:w > # ;           !
<          "+3Pl":0 "@U.verb.NULL@" 0:w 0:a 0:k         > # ;   !
<         "+4Pl":0 "@U.verb.NULL@" 0:y 0:i 0:w 0:a     > # ;   !



LEXICON IA_FUT_CON  !!= @CODE@ Second mode mode, Fut Cond
< "@U.verb.FutCon@" > IA_FUT_CON_SUF ;

LEXICON IA_FUT_CON_SUF
  +1Sg:%>yâni  # ; 
  +2Sg:%>yani  # ; 
  +3Sg:%>ci    # ; 
 +4Sg:%>yici  # ; 
  +1Pl:%>yâhki # ; ! exclusive Pl
 +12Pl:%>yahko # ; ! inclusive Pl
  +2Pl:%>yêko  # ; 
  +3Pl:%>twâwi # ; 
 +4Pl:%>yici  # ; 


LEXICON IA_SBJ !!= @CODE@ Third mode, subjunctive
< "+Prs":0          "@U.tm.Prs@"    > subjunctives ; !"
< "+Prt":0          "@U.tm.Prt@"    > subjunctives ; !"
< "+Fut":0 "+Int":0 "@U.tm.FutInt@" > subjunctives ; !"

LEXICON subjunctives
     +1Sg:%>yân #;
     +2Sg:%>yan	#;
     +3Sg:%>t	#;
    +4Sg:%>yit #;
     +1Pl:%>yâhk #;
    +12Pl:%>yahk #;
     +2Pl:%>yêk #;  ! NOTE: corrected according to dt, earlier we said %>nyêk
     +3Pl:%>cik #;
    +4Pl:%>yit #;


LEXICON IA_IMP  !!= @CODE@ Fourth mode, imperative
< "+Imp":0 "@U.verb.NULL@" > imp ; !


LEXICON imp
+Imm+2Sg:0   # ; !
+Imm+2Pl:%>k	 # ; !
+Imm+12Pl:%>tân	  # ; !
+Del+2Sg:%>hkan   # ; !
+Del+2Pl:%>hkêk   # ; !
+Del+12Pl:%>hkahk   # ; !

LEXICON IA_IMP_LONG_E
< "+Imp":0 "@U.verb.NULL@" > imp-long-E ;!

LEXICON imp-long-E
+Imm+2Sg:ê   # ;
+Imm+2Pl:%>êk	 # ;
+Imm+12Pl:%>êtân	  # ;
+Del+2Sg:%>êhkan   # ;
+Del+2Pl:%>êhkêk   # ;
+Del+12Pl:%>êhkahk   # ;


!! !!! Intransitive inanimate (II)
!      ===========================
!      ===========================


LEXICON IICONJ  !!= @CODE@ splits according to conjugation
+V+II+Ind+Prs: II_IND_PRS_FLAG ;
+V+II+Cnj: II_SBJ_FLAG ;

LEXICON II_IND_PRS_FLAG
@U.verb.NULL@ II_IND_PRS ;

LEXICON II_SBJ_FLAG
@U.verb.sbjPrs@ II_SBJ ;
 
LEXICON II_IND_PRS   !!= @CODE@ is positive present
+3Sg: # ;
+4Sg:%>yik # ;
+3Pl:%>a # ;
+4Pl:%>yiwa # ;

LEXICON II_SBJ 
    :%>k # ; ! Both these entries now give wrong forms (ê-misponk pro ê-mispok etc.)
+Fut:%>i # ; ! We need to decide whether to solve it in lexc (more lexica) or
             ! in twolc (more abstract representation)


!! !!!Transitive animate (TA)
!     =======================
!     =======================

!! The VTA verbs split in different moods.
!! There are 4 stem classes, 1-4 (VTA-1 through VTA-4)

LEXICON TACONJ_1 !!= @CODE@ 
+V+TA+Ind: TA_IND ;
+V+TA+Cnj: TA_SBJ ;
+V+TA+Fut: TA_FUT ;
+V+TA+Imp: TA_IMP ;


LEXICON TACONJ_2  !!= * @CODE@ splits in 4. The -aw shall be removed from some forms.
+V+TA+Ind:aw TA_IND ;
+V+TA+Cnj:aw TA_SBJ ;
+V+TA+Fut:aw TA_FUT ;
+V+TA+Imp:aw TA_IMP ;


LEXICON TA_IND !!= @CODE@ gives prs
+Prs: TA_IND_PRS ;

LEXICON TA_IND_PRS !!= @CODE@ gives tags for subject, flag for object, and directs to obj suffs
@U.verb.NI@   VTA_NI_O ;  !
@U.verb.KI@   VTA_KI_O ;  !
@U.verb.NULL@   VTA_NULL_O ;  !


LEXICON VTA_NI_O  !!= @CODE@ gives the objects suffixes matching 1Sg subject or 1Sg object
+1Sg+3SgO:%>âw		  # ;
+1Sg+3PlO:%>âwak	  # ;
+3Sg+1SgO:%>ik        # ;
+3Sg+1PlO:%>ik        # ;
+3Sg+1PlO:%>ikonân	  # ;
+3Pl+1SgO:%>ikwak	  # ;
+1Pl+3SgO:%>ânân	  # ;
+1Pl+3PlO:%>ânânak	  # ;
+3Pl+1PlO:%>ikonânak  # ;

LEXICON VTA_KI_O 	    !!= @CODE@ gives the objects suffixes matching 2Sg subject
+2Sg+3SgO:%>âw		  # ;
+2Sg+3PlO:%>âwak	  # ;
+3Sg+2SgO:%>ik		  # ;
+3Pl+2SgO:%>ikwak	  # ;
+12Pl+3SgO:%>ânaw	  # ;
+12Pl+3PlO:%>ânawak	  # ;
+3Sg+12PlO:%>ikonaw	  # ;
+3Sg+2PlO:%>ikowâw	  # ;
+3Pl+12PlO:%>ikonawak # ;
+2Pl+3SgO:%>âwâw	  # ;
+2Pl+3PlO:%>âwâwak	  # ;
+3Pl+2PlO:%>ikowâwak  # ;
				  
LEXICON VTA_NULL_O 	  
+3Sg+3SgO:%>êw		  # ; ! Oki 77
!+3Sg+3SgO:%>ik		  # ; ! Oki 77
!+3Sg+3SgO:%>kow	  # ; ! Oki 77
+3Sg+3PlO:%>êw		  # ; ! Oki 77
!+3Sg+3PlO:%>ikowak	  # ; ! Oki 77
!+3Sg+3PlO:%>ikak	  # ; ! Oki 77
!+3Pl+3SgO:%>kow	  # ; ! Oki 77
+3Pl+3SgO:%>êwak	  # ; ! Oki 77

+4Sg+3SgO:%>êyiwa	  # ;
+4Sg+3PlO:%>êyiwa	  # ;
+4Sg+3SgO:%>ikoyiwa  # ;
+4Sg+3PlO:%>ikoyiwa  # ;
+4Sg+4PlO:%>ikoyiwa  # ;

+3Pl+3PlO:%>ikowak	  # ;
+3Pl+3PlO:%>êwak	  # ;
+4Pl+3SgO:%>êyiwa	  # ;
+4Pl+3PlO:%>êyiwa	  # ;



!LEXICON TA_IND_PRT ! Dummy lexicon
!# ;


LEXICON TA_SBJ !!= @CODE@ gives flag diacritic and directs to subjunctive person suffixes
@U.verb.sbj@ TA_SBJ_SUF ;

LEXICON TA_SBJ_SUF !!= @CODE@ gives subj + obj tag and suf

+1Sg+3SgO:%>ak		   # ;
+1Sg+3PlO:%>akik	   # ;

+1Pl+3SgO:%>âyâhk	   # ;
+1Pl+3PlO:%>âyâhkik	   # ;

+12Pl+3SgO:%>âyahk	   # ;
+12Pl+3PlO:%>âyâhkok   # ;

+2Sg+3SgO:%>at		   # ;
+2Sg+3PlO:%>acik	   # ;
+2Pl+3SgO:%>âyêk	   # ;
+2Pl+3PlO:%>âyêkok	   # ;

+3Sg+4PlO:%>ikocik	   # ;
+3Sg+3SgO:%>ât		   # ;
+3Sg+3PlO:%>ât		   # ;
+3Sg+2SgO:%>isk		   # ;
+3Sg+2PlO:%>ikoyêk	   # ;
+3Sg+1SgO:%>it		   # ;
+3Sg+1PlO:%>ikoyâhk	   # ;
+3Sg+12PlO:%>ikoyahk   # ;

+3Pl+4PlO:%>ikocik	   # ;
+3Pl+3SgO:%>âcik	   # ;
+3Pl+3PlO:%>âcik	   # ;
+3Pl+2SgO:%>iskik	   # ;
+3Pl+2PlO:%>ikoyêkok   # ;
+3Pl+1SgO:%>icik	   # ;
+3Pl+1PlO:%>ikoyâhkik  # ;
+3Pl+12PlO:%>ikoyâhkok # ;

+4Sg+4SgO:%>koyit	   # ;
+4Sg+4PlO:%>ikoyit   # ;
+4Sg+3SgO:%>âyit	   # ;
+4Sg+3PlO:%>ikocik	   # ;

+4Pl+4SgO:%>koyit	   # ;
+4Pl+4PlO:%>ikoyit   # ;
+4Pl+3SgO:%>âyit	   # ;
+4Pl+3SgO:%>ikot	   # ;
+4Pl+3PlO:%>ikocik	   # ;


LEXICON TA_FUT !!= @CODE@ gives flag diacritic and directs to subjunctive person suffixes
@U.verb.fut@ TA_FUT_SUF ;


LEXICON TA_FUT_SUF

+1Sg+3SgO:%>aki		   # ;
+1Sg+3PlO:%>akwâwi	   # ;
+1Pl+3SgO:%>âyâhki	   # ;
+1Pl+3PlO:%>âyâhkwâwi  # ;
+12Pl+3SgO:%>âyâhko	   # ;
+12Pl+3PlO:%>âyâhkwâwi # ;

+2Sg+3SgO:%>aci		   # ;
+2Sg+3PlO:%>atwâwi	   # ;
+2Pl+3SgO:%>âyêko	   # ;
+2Pl+3PlO:%>âyêkwâwi   # ;
					   
+3Sg+4SgO:%>âyici	   # ;
+3Sg+3SgO:%>âci		   # ;
+3Sg+3PlO:%>ikotwâwi   # ;
+3Sg+2SgO:%>iski	   # ;
+3Sg+2PlO:%>ikoyêko	   # ;
+3Sg+1SgO:%>ici		   # ;
+3Sg+1PlO:%>ikoyâhki   # ;
+3Sg+12PlO:%>ikoyahko  # ;
					   
+3Pl+3SgO:%>âtwâwi	   # ;
+3Pl+3PlO:%>âtwâwi	   # ;
+3Pl+3PlO:%>ikotwâwi   # ;
					   
+4Sg+4PlO:%>ikoyici  # ;
+4Sg+3SgO:%>ikoci	   # ;
+4Sg+3PlO:%>âyici	   # ;
+4Pl+4PlO:%>ikoyici  # ;
+4Pl+3SgO:%>ikoci	   # ;
+4Pl+3PlO:%>âyici	   # ;



LEXICON TA_IMP
@U.verb.NULL@  2Sg_Imp ;
@U.verb.NULL@  2Pl_Imp ;
@U.verb.NULL@ 12Pl_Imp ;

!@U.verb.imp2sg@  2Sg_Imp ;
!@U.verb.imp1pl@  2Pl_Imp ;
!@U.verb.imp2pl@ 12Pl_Imp ;

LEXICON 2Sg_Imp
+Imm+2Sg+3SgO: # ;
+Imm+2Sg+3PlO:%>ik # ;
+Del+2Sg+3SgO:%>âhkan # ;
+Del+2Sg+3PlO:%>âhkanik # ;

LEXICON 2Pl_Imp
+Imm+2Pl+3SgO:%>ihk # ;
+Imm+2Pl+3PlO:%>ihkok # ;
+Del+2Pl+3SgO:%>âhkêk # ;
+Del+2Pl+3PlO:%>âhkêkok # ;

LEXICON 12Pl_Imp
+Imm+12Pl+3SgO:%>âtân # ;
+Imm+12Pl+3PlO:%>âtânik # ;
+Del+12Pl+3SgO:%>âhkahk # ;
+Del+12Pl+3PlO:%>âhkahkok # ;







!! !! Transitive Inanimate (TI)
!     =========================
!     =========================


LEXICON TICONJ  !!= * @CODE@ not yet written
+V+TI+Ind: TI_IND ;


LEXICON TI_IND
 TI_IND_SUFF ;
 
 
LEXICON TI_IND_SUFF
+1Sg@U.verb.1sgindep@:n@U.verb.1sgindep@ # ;
+2Sg@U.verb.2sgindep@:n@U.verb.2sgindep@ # ;
+3Sg@U.verb.3sgindep@:m@U.verb.3sgindep@ # ;
+4Sg000@U.verb.3osgindep@:miyiwa@U.verb.3osgindep@ # ;
!+3iSg@U.verb.3isgindep@:m@U.verb.3isgindep@ # ;
+1Pl@U.verb.1plindep@:nân@U.verb.1plindep@ # ;   ! exclusive Pl
+12Pl@U.verb.12plindep@:naw@U.verb.12plindep@ # ; ! inclusive Pl
+2Pl@U.verb.2plindep@:nâwâw@U.verb.2plindep@ # ;
+3Pl@U.verb.3plindep@:wak@U.verb.3plindep@ # ;



