! "Inflections" of English definitions for Cree verbs

define Consonant [ b | c | d | f | g | h | j | k | l | m | n | p | q | r | s | t | v | w | x | z ]  ;

define Vowel [ a | e | i | o | u | â | ê | î | ô | á | é | í | ó | ú | à | è | ì | ò | ù ] ;

define Capital [ A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z ] ;

define Alphabet [ Vowel | Consonant | "y" | Capital ] ;

define Punctuation [ "." | "," | ":" | ";" | "!" | "?" | "-" | "/" | "|" | "\" | %' | %" | "(" | ")" | "[" | "]" | "{" | "}" ] ;

define Symbols [ "@" | "#" | "$" | "€" | "£" | "§" | "%" | "&" | "+" | "*" | "<" | ">" | "+" | "=" | "~" | "^" ] ;

define Number [ 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 ] ;

define Letters [ Alphabet | Punctuation | Symbols | Number | " " ] ;

define Wx \[ Letters - " " ] ; ! (Word-boundary character set - non-printable characters and space)

! define Bx [ " " | .#. | Punctuation ] ;

! define Px [ "," | ";" | .#. ] ;

define TenseAspect [ "Prs+" | "Prt+" | "Def+" | "Fut+" | "Int+" | "Cond+" | "Inf+" | "Imm+" | "Del+" ] ;

define Progressive [ "Prog+" ] ;

define Repetitive [ "Rept+" ] ;

define Negation [ "Neg+" ] ;

define Subject [ "1Sg+" | "2Sg+" | "3Sg+" | "1Du+" | "2Du+" | "3Du+" | "1Distr+" | "2Distr+" | "3Distr+" | "1Pl+" | "21Pl+" | "2Pl+" | "3Pl+" | "4Sg+" | "4Pl+" | "4Sg/Pl+" | "5Sg/Pl+" | "X+" | "XPl+" ] ;

define DirectObject [ "1SgO+" | "2SgO+" | "3SgO+" | "1DuO+" | "2DuO+" | "3DuO+" | "1DistrO+" | "2DistrO+" | "3DistrO+" | "1PlO+" | "21PlO+" | "2PlO+" | "3PlO+" | "4Sg/PlO+" | "5Sg/PlO+" | "XO+" | "XPlO+" ] ;

define IndirectObject [ "1SgIO+" | "2SgIO+" | "3SgIO+" | "1DuIO+" | "2DuIO+" | "3DuIO+" | "1PlIO+" | "21PlIO+" | "2PlIO+" | "3PlIO+" | "4Sg/PlIO+" | "5Sg/PlIO+" | "XIO+" | "XPlIO+" ] ;


! Tenses/aspects/moods

define RsubjectPrs3Sg [ "@R.subject.3Sg@" | "@R.subject.4Sg@" | "@R.subject.0Sg@" | "@R.subject.1Distr@" | "@R.subject.2Distr@" | "@R.subject.3Distr@" ] ;

define DsubjectPrs3Sg [ "@D.subject.3Sg@" "@D.subject.4Sg@" "@D.subject.0Sg@" "@D.subject.1Distr@" "@D.subject.2Distr@" "@D.subject.3Distr@" ] ;

define Rsubject2SgPl [ "@R.subject.2Sg@" | "@R.subject.2Pl@" ] ;

define Dsubject2SgPl [ "@D.subject.2Sg@" "@D.subject.2Pl@" ]

define RsubjectDuPl [ "@R.subject.1Du@" | "@R.subject.2Du@" | "@R.subject.3Du@" | "@R.subject.1Pl@" | "@R.subject.21Pl@" | "@R.subject.2Pl@" | "@R.subject.3Pl@" ] ;

define DsubjectDuPl [ "@R.subject.1Du@" "@R.subject.2Du@" "@R.subject.3Du@" "@R.subject.1Pl@" "@R.subject.21Pl@" "@R.subject.2Pl@" "@R.subject.3Pl@" ] ;

define Px [ "." | "," | ":" | ";" | .#. ] ;

define Bx [ Px | " " ] ;

regex [
! Present tense / (Future) conditional
[..] -> [ [ "@R.tense.Prs@" | "@R.tense.Cond@" ] "@D.neg@" "@D.prog@"
| { does not} [ "@R.tense.Prs@" | "@R.tense.Cond@" ] "@R.neg.Neg@" RsubjectPrs3Sg "@D.prog@"
| { do not} [ "@R.tense.Prs@" | "@R.tense.Cond@" ] "@R.neg.Neg@" DsubjectPrs3Sg "@D.prog@"
| { is} [ "@R.tense.Prs@" | "@R.tense.Cond@" ] "@D.neg@" "@R.prog.Prog@"
| { is not} [ "@R.tense.Prs@" | "@R.tense.Cond@" ] "@R.neg.Neg@" "@R.prog.Prog@"
! Past tense
| "@R.tense.Prt@" "@D.neg@" "@D.prog@"
| { did not} "@R.tense.Prt@" "@R.neg.Neg@" "@D.prog@"
| { was} "@R.tense.Prt@" "@D.neg@" Dsubject2SgPl DsubjectDuPl "@R.prog.Prog@"
| { were} "@R.tense.Prt@" "@D.neg@" [ "@R.subject.2Sg@" | RsubjectDuPl ] "@R.prog.Prog@"
| { was not} "@R.tense.Prt@" "@R.neg.Neg@" "@D.subject.2Sg@" DsubjectDuPl "@R.prog.Prog@"
| { were not} "@R.tense.Prt@" "@R.neg.Neg@" [ "@R.subject.2Sg@" | RsubjectDuPl ] "@R.prog.Prog@"
! Future prospective
| { IS going to} "@R.tense.Fut@" "@D.neg@" "@D.prog@"
| { IS not going to} "@R.tense.Fut@" "@R.neg.Neg@" "@D.prog@"
| { IS going to be} "@R.tense.Fut@" "@D.neg@" "@R.prog.Prog@"
| { IS not going to be} "@R.tense.Fut@" "@R.neg.Neg@" "@R.prog.Prog@"
! Future definite
| { will} "@R.tense.Def@" "@D.neg@" "@D.prog@"
| { will not} "@R.tense.Def@" "@R.neg.Neg@" "@D.prog@"
| { will be} "@R.tense.Def@" "@D.neg@" "@R.prog.Prog@"
| { will not be} "@R.tense.Def@" "@R.neg.Neg@" "@R.prog.Prog@"
! Future intentional
| { wants to} "@R.tense.Int@" "@D.neg@" "@D.prog@" R.subject.Prs3Sg
| { want to} "@R.tense.Int@" "@D.neg@" "@D.prog@" D.subject.Prs3Sg
| { does not want to} "@R.tense.Int@" "@R.neg.Neg@" "@D.prog@" R.subject.Prs3Sg
| { do not want to} "@R.tense.Int@" "@R.neg.Neg@" "@D.prog@" D.subject.Prs3Sg
| { wants to be} "@R.tense.Int@" "@D.neg@" "@R.prog.Prog@" R.subject.Prs3Sg
| { want to} "@R.tense.Int@" "@D.neg@" "@R.prog.Prog@" D.subject.Prs3Sg
| { does not want to be} "@R.tense.Int@" "@R.neg.Neg@" "@R.prog.Prog@" R.subject.Prs3Sg
| { do not want to be} "@R.tense.Int@" "@R.neg.Neg@" "@R.prog.Prog@" D.subject.Prs3Sg
! Infinitive
| { to} "@R.tense.Inf@" "@D.neg@" "@D.prog@"
| { to not} "@R.tense.Inf@" "@R.neg.Neg@" "@D.prog@"
| { to be} "@R.tense.Inf@" "@D.neg@" "@R.prog.Prog@"
| { to not be} "@R.tense.Inf@" "@R.neg.Neg@" "@R.prog.Prog@"
! Immediate imperative
| "@R.tense.Imm@" "@D.prog@"
| { be} "@R.tense.Imm@" "@R.prog.Prog@"
! Delayed imperative
| "@R.tense.Del@" "@D.prog@"
| { be} "@R.tense.Del@" "@R.prog.Prog@" ]
|| Wx {s/he} _ Wx
] ;
define AuxiliaryPhrase

regex [
[..] -> "@R.tense.Cnj@" {as }
| "@R.tense.Cond@" {when }
| "@R.tense.Inf@" {for }
| [ "@R.tense.Imm@" | "@R.tense.Del@" ] "@D.neg@" {let }
| [ "@R.tense.Imm@" | "@R.tense.Del@" ] "@R.neg@" {do not let }
| "@D.tense.Cond@" "@D.tense.Inf@" [ [ "@D.tense.Imm@" "@D.tense.Del@" ] | [ [ "@R.tense.Imm@" | "@R.tense.Del@" ] Rsubject2SgPl ] ]
|| _ Wx {s/he} Wx
] ;
define PhrasePrefix

regex [
[..] -> { now} "@R.tense.Imm@"
| { later} "@R.tense.Del@"
| "@D.tense.Imm@" "@D.tense.Del@"
|| _ Px
] ;
define PhraseSuffix

! Conversion of tags into flag-diacritics
regex [ "Prs+" -> "@P.tense.Prs@" , "Prt+" -> "@P.tense.Prt@" , "Def+" -> "@P.tense.Def@" , "Fut+" -> "@P.tense.Fut@" , "Int+" -> "@P.tense.Int@" , "Cond+" -> "@P.tense.Cond@" , "Imm+" -> "@P.tense.Imm@" , "Del+" -> "@P.tense.Del@" , "Inf+" -> "@P.tense.Inf@" ]
.o. [ "Prog+" -> "@P.prog.Prog@" ]
.o. [ "Rept+" -> "@P.rept.Rept@" ]
.o. [ "Neg+" -> "@P.neg.Neg@" ]
.o. [ "1Sg+" -> "@P.subject.1Sg@" , "2Sg+" -> "@P.subject.2Sg@", "3Sg+" -> "@P.subject.3Sg@" , "1Du+" -> "@P.subject.1Du@" , "2Du+" -> "@P.subject.2Du@" , "3Du+" -> "@P.subject.3Du@" , "1Distr+" -> "@P.subject.1Distr@" , "2Distr+" -> "@P.subject.2Distr@", "3Distr+" -> "@P.subject.3Distr@", "1Pl+" -> "@P.subject.1Pl@" , "21Pl+" -> "@P.subject.21Pl@", "2Pl+" -> "@P.subject.2Pl@" , "3Pl+" -> "@P.subject.3Pl@" , "4Sg+" -> "@P.subject.4Sg@" , "4Pl+" -> "@P.subject.4Pl@" , "4Sg/Pl+" -> "@P.subject.4Sg/Pl@" , "5Sg/Pl+" -> "@P.subject.5Sg/Pl@", "X+" -> "@P.subject.X@" , "XPl+" -> "@P.subject.XPl@" ]
.o. [ "1SgO+" -> "@P.object.1Sg@" , "2SgO+" -> "@P.object.2Sg@", "3SgO+" -> "@P.object.3Sg@" , "1DuO+" -> "@P.object.1Du@" , "2DuO+" -> "@P.object.2Du@", "3DuO+" -> "@P.object.3Du@" , "1DistrO+" -> "@P.object.1Distr@", "2DistrO+" -> "@P.object.2Distr@" , "3DistrO+" -> "@P.object.3Distr@" , "1PlO+" -> "@P.object.1Pl@" , "21PlO+" -> "@P.object.21Pl@", "2PlO+" -> "@P.object.2Pl@" , "3PlO+" -> "@P.object.3Pl@" ,  "4Sg/PlO+" -> "@P.object.4Sg/Pl@" , "5Sg/PlO+" -> "@P.object.5Sg/Pl@", "XO+" -> "@P.object.X@" , "XPlO+" -> "@P.object.XPl@" ]
.o. [ "1SgIO+" -> "@P.recipient.1Sg@" , "2SgIO+" -> "@P.recipient.2Sg@" , "3SgIO+" -> "@P.recipient.3Sg@" ,  "1DuIO+" -> "@P.recipient.1Du@" , "2DuIO+" -> "@P.recipient.2Du@" , "3DuIO+" -> "@P.recipient.3Du@" , "1PlIO+" -> "@P.recipient.1Pl@" , "21PlIO+" -> "@P.recipient.21Pl@" , "2PlIO+" -> "@P.recipient.2Pl@" , "3PlIO+" -> "@P.recipient.3Pl@" , "4Sg/PlIO+" -> "@P.recipient.4Sg/Pl@" , "5Sg/PlIO+" -> "@P.recipient.5Sg/Pl@" , "XIO+" -> "@P.recipient.X@" , "XPlIO+" -> "@P.recipient.XPl@" ] ;
define Tag2FlagConversion

! Definition of input and conversion
regex [ TenseAspect Subject (DirectObject) (IndirectObject) (Progressive) (Repetitive) (Negation) Letters+ ] ;
define Input

regex [ Input
.o. Tag2FlagConversion
.o. AuxiliaryPhrase
.o. PhrasePrefix
.o. PhraseSuffix
] ;

twosided flag-diacritics
