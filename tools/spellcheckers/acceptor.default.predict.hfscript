!! Instructions for compiling an acceptor based on morpheme completion
!! with morpheme boundaries for spell-checking purposes

echo 'Compiling weighted ACCEPTOR FST based on morpheme completion.'

echo 'Loading normative generator with morpheme boundaries.'
load ../../src/crk-strict-generator-with-morpheme-boundaries-giellaltbuild.hfst
define Words

echo 'Merging suffixes together, and short suffix chunks with stem.'

define MergeSuffixes [ ">" -> 0 || ">" ?+ _ ] ;
define MergeShortFinalSuffix [ ">" -> 0 || _ ?^{1,2} .#. ] ;

set flag-is-epsilon ON
regex [ Words .o. MergeSuffixes .o. MergeShortFinalSuffix ] ;
define Words
set flag-is-epsilon OFF

!! Prefix Weighting !!

echo 'Compiling known prefixes with weights.'
! read lexc ../../src/derivation/prefix_weighting.lexc
! read lexc prefix_weighting.lexc
load PrefixWeighting.hfst
define ObservedPrefixWeights

echo 'Compiling set of unobserved prefixes.'
regex [ ?+ - ObservedPrefixWeights.l ] ;
define UnobservedPrefixes

echo 'Creating weights for unobserved prefixes.'
! regex [ ?::10 ( ?::5 ( ?::4 ( ?::3 ( ?::2 ( ?::1 [ ?::0.5 ]* ) ) ) ) ) ] ;
! regex [ ?+ ]::15 ;
regex [ ?::15 [ [ ? - "-" ]::1 | "-"::0.5 ]* ] ;
define UnobservedWeights

echo 'Composing weights with set of unobserved prefixes.'
set flag-is-epsilon ON
regex [ UnobservedPrefixes .o. UnobservedWeights ] ;
define UnobservedPrefixWeights
set flag-is-epsilon OFF

echo 'Combining weighted known and unknown prefixes together.'
regex [ ObservedPrefixWeights | UnobservedPrefixWeights ] ;

! down ekw
! down Ãªkw

! save stack PrefixWeighting.hfst
define PrefixWeighting

!! Morpheme Completion !!

echo 'Beginning of specification of morpheme completion FST.'

define Bx [ "<" | ">" | "/" ] ;

define Ax [ ? - Bx ] ;

echo 'Specify end-marker for complete words: Ex'
define Ex [ "$" ] ;

echo 'Specify marker for incomplete words: Ix'
define Ix [ "~" ] ; ! Needs to be matched with the similar definition within the Error Model.

define PrefixStrings [ ?* [ 0:? ]* ] ;

define NextMorpheme [ ?+ [ 0:Ax ]* 0:Bx ] ;

define InsertBoundary [ 0 (->) Bx ] ;

! Add a morpheme boundary after a hyphen (which is used to indicate prefix boundaries
! in lexicalized lemmas)

define AddBoundary [ [..] -> "/" || "-" _ \[ "<" | ">" ] ] ; 

define rmBoundary [ Bx -> 0 ] ;

define CorrectWords [ ~[ $[ "+Err/Orth" | "+Err/Frag" ] ] .o. Words .o. AddBoundary ] ;

regex [ [ InsertBoundary
.o. NextMorpheme
.o. [ PrefixStrings
! Add markers for complete word-forms plus final morpheme boundary '>' at the end of complete word-forms
! (to match prefix weights where complete words are marked with a final 'Ex')
! and require that such word-forms use a hyphen for explicitly marked morpheme boundaries ('@D.joiner.NULL@' flag)
.o. [ CorrectWords Ex ">" ].l ! Take the lower side of the composition
].u ! Take the upper-side of the composition and concatenate a final D-flag disallowing non-hyphened prefixes.
.o. rmBoundary ] "@D.joiner.NULL@"
] ;
define MorphemeCompletion

! regex [ [..] -> "-" || \[ "$" | "-" ] _ .#. ] .o. [ "$" -> 0 ] ;
! Note that incomplete word-marker 'Ix' will not be output after a final hyphen '-'
! Thus, incomplete words ending with a hyphen (e.g. prefixes) will not receive a doubled hyphen.
regex [ [..] -> Ix || \[ Ex | Ix ] _ .#. ] .o. [ Ex -> 0 ] ;
define MarkIncompleteWords

! The following setting needed for the (prefix) weighting FST to match the morpheme completion FST
! and ignore flag-diacritics in the latter FST.
set flag-is-epsilon ON

! D-flag added to rule out boundaries without a hyphen
! regex [ InsertMissingChars .o. SpellRelax .o. [ MorphemeCompletion "@D.joiner.NULL@" ] ] ;
! save stack SpellRelaxedMorphemeCompletion.hfst ! ******** Speller acceptor (two-sided) ********
! save stack ErrorModel.hfst ! ***** Speller error model transductor (weighted wrt certain edits)
! define SpellRelaxedMorphemeCompletion

echo 'Compiling acceptor from morpheme completion prefixes with their weights, and marking incomplete words.'
regex [ [ MorphemeCompletion.l .o. PrefixWeighting.l ] .o. MarkIncompleteWords ].l ;
save stack Acceptor.hfst ! *** Speller acceptor automaton (weighted wrt prefix frequencies) ***
define Acceptor

!! hfst-fst2fst -f olw -i ErrorModel.hfst -o ErrorModel.hfstol
!! hfst-fst2fst -f olw -i Acceptor.hfst -o Acceptor.hfstol

!! hfst-ospell command example 
!! hfst-ospell -S -n 10 -X -m ErrorModel.hfstol -l Acceptor.hfstol
