!! Instructions for an error model for a speller based on morpheme completion

echo 'Compiling weighted ERROR MODEL FST for acceptor based on morpheme-completion.''

! Definition of character set

define Consonant [ c | h | k | m | n | p | s | t | y | w ] ;

define Vowel [ a | â | ê | i | î | o | ô ] ;

define ConsonantCapital [ C | H | K | M | N | P | S | T | Y | W ] ;

define VowelCapital [ A | Â | Ê | I | Î | O | Ô ] ;

! Specific spell-relax rules

echo 'Loading or specifying spell-relax rules.'

!define SpellRelax [ a (->) â ,, e (->) ê ,, i (->) î ,, o (->) ô
!,, â (->) a ,, î (->) i ,, ô (->) o
!,, 0 (->) "-"::0.5
!,, h (->) "-"::1.0
!,, [..] (->) i::0.5 || Consonant _ Consonant
!,, [..] (->) h::0.5 || Vowel _ Stop
!,, h (->) 0::1.0 || Vowel _ Stop
!,, o (->) i::1.0 || _ w
!,, i (->) o::1.0 || _ w
!] ;

! Making use of pre-existing (unweighted or weighted) spellrelax rules

# Non-weighted spellrelax rules
# echo 'Using non-weighted spell-relax rules.'
# load ../../src/orthography/spellrelax.compose.hfst
# Weighted spellrelax rules
echo 'Using weighted spell-relax rules.'
# hfst-regexp2fst -S -i ../../src/orthography/spellrelax-weighted.regex -o spellrelax-weighted.hfst
load spellrelax-weighted.hfst
invert net
define SpellRelax

! Inserting reduced/deleted /i/ or hyphens, and use of <h> as joiner instead of <->
! regex [ [..] (->) "-" ,, [..] (->) i ,, h (->) "-" ];
regex [ [..] (->) "-"::0.5 ,, [..] (->) i::1.0 ,, h (->) "-"::2.0 ];
define InsertMissingChars

!!!! Character-based implementation for morpheme-completion-based error model

! Redefinition of alphabet
! $ marks the end of a complete word

echo 'Defining alphabet.'

define Ix [ "~" ] ;
define Ax [ Vowel | Consonant | "-" | Ix ] ;
define Cx [ ? - Ax ] ;

echo 'Defining single-edit-distance rule.' 
! regex [ ?+ [ ?:0 | ?:Ax | 0:? ] ?* ]^{0,1} ;
! regex [ ?+ ?:Ax::2.0 ?* ]^{0,1} ;
regex [ ?+ [ Cx:Ax::2.0 ]^{0,1} ?* ] ;
define SingleEditDist

echo 'Defining character-based completion rule, from 0 to 5 characters.'
! Upto 5-character completion, with an optional marker for complete word
! define NextChars [ Ax+ [ 0:Ax::0.5 ]^{0,5} [ 0:"$" ]? ] ;

! Upto 5-character completion, with the optional deletion of string-final hyphen marking an incomplete word
define NextChars [ [ Ax - Ix | Ix:0 ]+ [ Ix:0::0.0 | Ix::1.0 ]^{0,1} [ 0:[ Ax::0.5 - Ix ] ]^{0,5} [ 0:Ix::1.0 ]^{0,1} ] ;

echo 'Compling error-model as a combination of:'<
echo 'Spell-relaxation, insertion of missing characters, single-edit-distance, and character-based completion'
regex [ SpellRelax
.o. InsertMissingChars # Not needed if weighted spell-relax rules used, but needed with non-weighted spell-relax
# .o. SingleEditDist # Experimental and excluded for now
.o. NextChars
] ;

save stack ErrorModel.hfst ! *** Character-based error model ***

!! hfst-fst2fst -f olw -i ErrorModel.hfst -o ErrorModel.hfstol

!! hfst-ospell command example 
!! hfst-ospell -S -n 10 -X -m ErrorModel.hfstol -l Acceptor.hfstol
