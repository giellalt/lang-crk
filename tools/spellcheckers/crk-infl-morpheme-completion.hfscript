! Instructions for compiling a morpheme completion FST
! based on morpheme boundaries

load ../../src/crk-strict-generator-with-morpheme-boundaries-giellaltbuild.hfst
define Words

!! Prefix Weighting !!

echo 'Compiling known prefixes with weights.'
! read lexc ../../src/derivation/prefix_weighting.lexc
read lexc prefix_weighting.lexc !! prefix weighting with marking of complete words with '$'
define ObservedPrefixWeights

echo 'Compiling set of unobserved prefixes.'
regex [ ?+ - ObservedPrefixWeights.l ] ;
define UnobservedPrefixes

echo 'Creating weights for unobserved prefixes.'
! regex [ ?::10 ( ?::5 ( ?::4 ( ?::3 ( ?::2 ( ?::1 [ ?::0.5 ]* ) ) ) ) ) ] ;
! regex [ ?+ ]::15 ;
regex [ ?::15 [ [ ? - "-" ]::1 | "-"::0.5 ]* ] ;
define UnobservedWeights

echo 'Composing weights with set of unobserved prefixes.'
set flag-is-epsilon ON
regex [ UnobservedPrefixes .o. UnobservedWeights ] ;
define UnobservedPrefixWeights
set flag-is-epsilon OFF

echo 'Combining weighted known and unknown prefixes together.'
regex [ ObservedPrefixWeights | UnobservedPrefixWeights ] ;

! down ekw
! down êkw

save stack PrefixWeighting.hfst ! ******** Speller error model (weighting any strings) ********
define PrefixWeighting

!! Morpheme Completion !!

echo 'Beginning of specification of morpheme completion FST.'

define Bx [ "<" | ">" | "/" ] ;

define Ax [ ? - Bx ] ;

define Consonant [ c | h | k | m | n | p | s | t | y | w ] ;

define Vowel [ a | â | ê | i | î | o | ô ] ;

define Stop [ c | k | p | t ] ;

! Specific spell-relax rules

!define SpellRelax [ a (->) â ,, e (->) ê ,, i (->) î ,, o (->) ô
!,, â (->) a ,, î (->) i ,, ô (->) o
!,, 0 (->) "-"::0.5
!,, h (->) "-"::1.0
!,, [..] (->) i::0.5 || Consonant _ Consonant
!,, [..] (->) h::0.5 || Vowel _ Stop
!,, h (->) 0::1.0 || Vowel _ Stop
!,, o (->) i::1.0 || _ w
!,, i (->) o::1.0 || _ w
!] ;

! Making use of pre-existing spellrelax rules

load ../../src/orthography/spellrelax.compose.hfst
invert net
define SpellRelax

! Inserting reduced/deleted /i/ or hyphens, and use of <h> as joiner instead of <->
! regex [ [..] (->) "-" ,, [..] (->) i ,, h (->) "-" ];
regex [ [..] (->) "-"::0.5 ,, [..] (->) i::1.0 ,, h (->) "-"::2.0 ];
define InsertMissingChars

define MaxHyphens [ [ [ ? - "-" ]* "-" ]^<6 [ ? - "-" ]* ] ;

define NextMorpheme [ ?+ [ 0:Ax ]* 0:Bx ] ;

define PrefixStrings [ ?* [ 0:? ]* ] ;

define InsertBoundary [ 0 (->) Bx ] ;

define AddBoundary [ [..] -> "/" || "-" _ \[ "<" | ">" ] ] ; 

define rmBoundary [ Bx -> 0 ] ;

define CorrectWords [ ~[ $[ "+Err/Orth" | "+Err/Frag" ] ] .o. Words .o. AddBoundary ] ;

regex [ InsertBoundary
.o. NextMorpheme
.o. [ PrefixStrings .o. [ CorrectWords "$" ">" "@D.joiner.NULL@" ].l ].u
.o. rmBoundary
] ;
define MorphemeCompletion

regex [ [..] -> "-" || \[ "$" | "-" ] _ .#. ] .o. [ "$" -> 0 ] ;
define MarkIncompleteWords

! The following setting needed for the weighting to match the morpheme completion automaton characters
! and ignore flag-diacritcs
set flag-is-epsilon ON

! D-flag added to rule out boundaries without a hyphen
! regex [ InsertMissingChars .o. SpellRelax .o. [ MorphemeCompletion "@D.joiner.NULL@" ] ] ;
! save stack SpellRelaxedMorphemeCompletion.hfst ! ******** Speller acceptor (two-sided) ********
! save stack ErrorModel.hfst ! ***** Speller error model transductor (weighted wrt certain edits)
! define SpellRelaxedMorphemeCompletion

regex [ [ MorphemeCompletion.l .o. PrefixWeighting.l ] .o. MarkIncompleteWords ].l ;
save stack Acceptor.hfst ! *** Speller acceptor automaton (weighted wrt prefix frequencies) ***
define Acceptor

!! Weighted morpheme completion (not used here)
! regex [ SpellRelaxedMorphemeCompletion .o. PrefixWeighting ] ;

!!!! Character-based implementation for morpheme-completion-based error model

! Redefinition of alphabet
! $ marks the end of a complete word

define Ax [ Vowel | Consonant | "-" | "$" ] ;

! Upto 5-character completion, with an optional marker for complete word
! define NextChars [ Ax+ [ 0:Ax::0.5 ]^{0,5} [ 0:"$" ]? ] ;

! Upto 5-character completion, with the optional deletion of string-final hyphen marking an incomplete word
define NextChars [ Ax+ [ "-":0 ]? [ 0:Ax::0.5 ]^{0,5} ] ;

regex [ SpellRelax .o. InsertMissingChars .o. NextChars ] ;

save stack ErrorModel.hfst ! *** Character-based error model ***

!! hfst-fst2fst -f olw -i ErrorModel.hfst -o ErrorModel.hfstol
!! hfst-fst2fst -f olw -i Acceptor.hfst -o Acceptor.hfstol

!! hfst-ospell command example 
!! hfst-ospell -S -n 10 -X -m ErrorModel.hfstol -l Acceptor.hfstol
